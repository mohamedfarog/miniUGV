
miniUGV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800678c  0800678c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800678c  0800678c  0000778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006794  08006794  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006794  08006794  00007794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800679c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000068  08006804  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08006804  0000840c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001012b  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c2  00000000  00000000  000181c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd5  00000000  00000000  0001b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e3  00000000  00000000  0001bf75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011426  00000000  00000000  0003e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4850  00000000  00000000  0004fd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001245ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  00124614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00128c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006378 	.word	0x08006378

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006378 	.word	0x08006378

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f001 fb3e 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f8b4 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f9ec 	bl	8000998 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  UART2_Init();
 80005c0:	f000 fa5e 	bl	8000a80 <UART2_Init>
  CAN1_Init();
 80005c4:	f000 fc34 	bl	8000e30 <CAN1_Init>
  CAN2_Init();
 80005c8:	f000 fe58 	bl	800127c <CAN2_Init>
  MX_TIM2_Init();
 80005cc:	f000 f930 	bl	8000830 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d0:	f000 f988 	bl	80008e4 <MX_TIM3_Init>
  TIMER6_Init();
 80005d4:	f000 fbd8 	bl	8000d88 <TIMER6_Init>



  TIMER7_Init();
 80005d8:	f000 fc00 	bl	8000ddc <TIMER7_Init>
  LogI(TAG, (const char *)"Welcome to NAVCON Hauler Application: %s-V%s",FW_NAME,FW_VERSION);
 80005dc:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <main+0x12c>)
 80005de:	4a40      	ldr	r2, [pc, #256]	@ (80006e0 <main+0x130>)
 80005e0:	4940      	ldr	r1, [pc, #256]	@ (80006e4 <main+0x134>)
 80005e2:	4841      	ldr	r0, [pc, #260]	@ (80006e8 <main+0x138>)
 80005e4:	f000 fac0 	bl	8000b68 <LogI>
 	LogD(TAG, (const char *)"SYSCLK : %ldHz",HAL_RCC_GetSysClockFreq());
 80005e8:	f002 fe42 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	493e      	ldr	r1, [pc, #248]	@ (80006ec <main+0x13c>)
 80005f2:	483d      	ldr	r0, [pc, #244]	@ (80006e8 <main+0x138>)
 80005f4:	f000 fa6e 	bl	8000ad4 <LogD>
 	LogD(TAG, (const char *)"HCLK   : %ldHz",HAL_RCC_GetHCLKFreq());
 80005f8:	f002 fe06 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	493b      	ldr	r1, [pc, #236]	@ (80006f0 <main+0x140>)
 8000602:	4839      	ldr	r0, [pc, #228]	@ (80006e8 <main+0x138>)
 8000604:	f000 fa66 	bl	8000ad4 <LogD>
 	LogD(TAG, (const char *)"PCLK1  : %ldHz",HAL_RCC_GetPCLK1Freq());
 8000608:	f002 fe0a 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4938      	ldr	r1, [pc, #224]	@ (80006f4 <main+0x144>)
 8000612:	4835      	ldr	r0, [pc, #212]	@ (80006e8 <main+0x138>)
 8000614:	f000 fa5e 	bl	8000ad4 <LogD>
 	LogD(TAG, (const char *)"PCLK2  : %ldHz",HAL_RCC_GetPCLK2Freq());
 8000618:	f002 fe16 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4935      	ldr	r1, [pc, #212]	@ (80006f8 <main+0x148>)
 8000622:	4831      	ldr	r0, [pc, #196]	@ (80006e8 <main+0x138>)
 8000624:	f000 fa56 	bl	8000ad4 <LogD>
 	 CAN_Filter_Config();
 8000628:	f000 fc48 	bl	8000ebc <CAN_Filter_Config>
 	if (CAN1_Start() != HAL_OK)
 800062c:	f000 fcaa 	bl	8000f84 <CAN1_Start>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <main+0x8a>
 	{  // CAN 1 START
 	  	Error_Handler();
 8000636:	f000 fa1d 	bl	8000a74 <Error_Handler>
 	  	}
 	if (CAN2_Start() != HAL_OK)
 800063a:	f000 fe65 	bl	8001308 <CAN2_Start>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <main+0x98>
 	 	{  // CAN 1 START
 	 	  	Error_Handler();
 8000644:	f000 fa16 	bl	8000a74 <Error_Handler>
 	 	  	}


 	  TIM6->SR = 0;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <main+0x14c>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
 	  	HAL_TIM_Base_Start_IT(&htim6); // TIMER 6 START
 800064e:	482c      	ldr	r0, [pc, #176]	@ (8000700 <main+0x150>)
 8000650:	f003 fb2a 	bl	8003ca8 <HAL_TIM_Base_Start_IT>

 	  	TIM7->SR = 0;
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <main+0x154>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
 	  		HAL_TIM_Base_Start_IT(&htim7); // TIMER 7 START
 800065a:	482b      	ldr	r0, [pc, #172]	@ (8000708 <main+0x158>)
 800065c:	f003 fb24 	bl	8003ca8 <HAL_TIM_Base_Start_IT>
//  MX_USART1_UART_Init();

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000660:	2100      	movs	r1, #0
 8000662:	482a      	ldr	r0, [pc, #168]	@ (800070c <main+0x15c>)
 8000664:	f003 fbe0 	bl	8003e28 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_AUTORELOAD(&htim2,2000);
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <main+0x15c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000670:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000672:	4b26      	ldr	r3, [pc, #152]	@ (800070c <main+0x15c>)
 8000674:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000678:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800067a:	2100      	movs	r1, #0
 800067c:	4824      	ldr	r0, [pc, #144]	@ (8000710 <main+0x160>)
 800067e:	f003 fbd3 	bl	8003e28 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_AUTORELOAD(&htim3,2000);
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <main+0x160>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800068c:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <main+0x160>)
 800068e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000692:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	   if ((HAL_GetTick() - recievd_time) > timeout)
 8000694:	f001 fb34 	bl	8001d00 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <main+0x164>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <main+0x168>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d906      	bls.n	80006b6 <main+0x106>
	        {
	            // Timeout occurred, set variable to default value
	           dutyX = 50;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <main+0x16c>)
 80006aa:	2232      	movs	r2, #50	@ 0x32
 80006ac:	601a      	str	r2, [r3, #0]
	           dutyY = 68;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <main+0x170>)
 80006b0:	2244      	movs	r2, #68	@ 0x44
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	e008      	b.n	80006c8 <main+0x118>
	        }
	   else

    /* USER CODE BEGIN 3 */
//	  CAN1_Send(0x101, txmsg, 8);
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,con(dutyX));
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <main+0x16c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fdd0 	bl	8001260 <con>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <main+0x15c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	635a      	str	r2, [r3, #52]	@ 0x34

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,con(dutyY));
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <main+0x170>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fdc7 	bl	8001260 <con>
 80006d2:	4602      	mov	r2, r0
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <main+0x160>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	635a      	str	r2, [r3, #52]	@ 0x34
	   if ((HAL_GetTick() - recievd_time) > timeout)
 80006da:	e7db      	b.n	8000694 <main+0xe4>
 80006dc:	08006390 	.word	0x08006390
 80006e0:	08006398 	.word	0x08006398
 80006e4:	080063a0 	.word	0x080063a0
 80006e8:	080063d0 	.word	0x080063d0
 80006ec:	080063d8 	.word	0x080063d8
 80006f0:	080063e8 	.word	0x080063e8
 80006f4:	080063f8 	.word	0x080063f8
 80006f8:	08006408 	.word	0x08006408
 80006fc:	40001000 	.word	0x40001000
 8000700:	20000118 	.word	0x20000118
 8000704:	40001400 	.word	0x40001400
 8000708:	20000160 	.word	0x20000160
 800070c:	20000088 	.word	0x20000088
 8000710:	200000d0 	.word	0x200000d0
 8000714:	20000084 	.word	0x20000084
 8000718:	20000008 	.word	0x20000008
 800071c:	20000000 	.word	0x20000000
 8000720:	20000004 	.word	0x20000004

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2234      	movs	r2, #52	@ 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 f988 	bl	8005a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	@ (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <SystemClock_Config+0xd4>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800078c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 800079c:	235a      	movs	r3, #90	@ 0x5a
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 ff8b 	bl	80036cc <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 f95a 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fc2d 	bl	800303c <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007e8:	f000 f944 	bl	8000a74 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3750      	adds	r7, #80	@ 0x50
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){	// TIMER 6 THREAD
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <HAL_TIM_PeriodElapsedCallback+0x20>
		uint8_t txmsg[] = {0x65,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800080e:	4a07      	ldr	r2, [pc, #28]	@ (800082c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000818:	e883 0003 	stmia.w	r3, {r0, r1}
	}
	else if ((htim->Instance == TIM7)) // TIMER 7 THREAD
	{
//		LogD(TAG, (const char *)" TIm7 working  ");
	}
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40001000 	.word	0x40001000
 800082c:	08006418 	.word	0x08006418

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000852:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 8000854:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 450-1;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 800085c:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 800086a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800087c:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 800087e:	f003 fa83 	bl	8003d88 <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 f8f4 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 800089c:	f003 ffe8 	bl	8004870 <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008a6:	f000 f8e5 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008aa:	2370      	movs	r3, #112	@ 0x70
 80008ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 80008c2:	f003 fc69 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80008cc:	f000 f8d2 	bl	8000a74 <Error_Handler>
  }

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <MX_TIM2_Init+0xb0>)
 80008d2:	f000 ffbd 	bl	8001850 <HAL_TIM_MspPostInit>


}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	@ 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000088 	.word	0x20000088

080008e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000908:	4a22      	ldr	r2, [pc, #136]	@ (8000994 <MX_TIM3_Init+0xb0>)
 800090a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 450-1;
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_TIM3_Init+0xac>)
 800090e:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8000912:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800091a:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM3_Init+0xac>)
 800091c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000920:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_TIM3_Init+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000930:	f003 fa2a 	bl	8003d88 <HAL_TIM_PWM_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800093a:	f000 f89b 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	4619      	mov	r1, r3
 800094c:	4810      	ldr	r0, [pc, #64]	@ (8000990 <MX_TIM3_Init+0xac>)
 800094e:	f003 ff8f 	bl	8004870 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000958:	f000 f88c 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800095c:	2370      	movs	r3, #112	@ 0x70
 800095e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	4807      	ldr	r0, [pc, #28]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000974:	f003 fc10 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800097e:	f000 f879 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000982:	4803      	ldr	r0, [pc, #12]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000984:	f000 ff64 	bl	8001850 <HAL_TIM_MspPostInit>

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	@ 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000d0 	.word	0x200000d0
 8000994:	40000400 	.word	0x40000400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b2a      	ldr	r3, [pc, #168]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a25      	ldr	r2, [pc, #148]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 8000a24:	f002 faf0 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <MX_GPIO_Init+0xd8>)
 8000a40:	f002 f94e 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a44:	2320      	movs	r3, #32
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_GPIO_Init+0xd4>)
 8000a5c:	f002 f940 	bl	8002ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <Error_Handler>:

/* USER CODE BEGIN 4 */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <UART2_Init>:
		//There is a problem
		Error_handler();
	}
}

void UART2_Init(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <UART2_Init+0x44>)
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <UART2_Init+0x48>)
 8000a88:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <UART2_Init+0x44>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <UART2_Init+0x44>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <UART2_Init+0x44>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <UART2_Init+0x44>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <UART2_Init+0x44>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <UART2_Init+0x44>)
 8000aac:	220c      	movs	r2, #12
 8000aae:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <UART2_Init+0x44>)
 8000ab2:	f003 ff6d 	bl	8004990 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000abc:	f000 f806 	bl	8000acc <Error_handler>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001f0 	.word	0x200001f0
 8000ac8:	40004400 	.word	0x40004400

08000acc <Error_handler>:

void Error_handler(void){
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

	while(1);
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_handler+0x4>

08000ad4 <LogD>:
}

void LogD(const char *tag,const char *format, ...){
 8000ad4:	b40e      	push	{r1, r2, r3}
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8000adc:	af04      	add	r7, sp, #16
 8000ade:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8000ae2:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000ae6:	6018      	str	r0, [r3, #0]
	va_list arg_ptr;
	char logstr[255],lineBuff[300];
	va_start(arg_ptr, format);
 8000ae8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000aec:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	vsnprintf(logstr, 255, format, arg_ptr);
 8000af0:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8000af4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000af8:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000afc:	21ff      	movs	r1, #255	@ 0xff
 8000afe:	f004 ff95 	bl	8005a2c <vsniprintf>
	va_end(arg_ptr);
	sprintf(lineBuff,"%s %lu [%s] %s %s\r\n",ANSI_COLOR_BLUE,HAL_GetTick(),tag,logstr,ANSI_COLOR_RESET);
 8000b02:	f001 f8fd 	bl	8001d00 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	f107 0008 	add.w	r0, r7, #8
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <LogD+0x84>)
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8000b1a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4613      	mov	r3, r2
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LogD+0x88>)
 8000b26:	490e      	ldr	r1, [pc, #56]	@ (8000b60 <LogD+0x8c>)
 8000b28:	f004 ff34 	bl	8005994 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)lineBuff,strlen(lineBuff),HAL_MAX_DELAY);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb6d 	bl	8000210 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f107 0108 	add.w	r1, r7, #8
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <LogD+0x90>)
 8000b44:	f003 ff74 	bl	8004a30 <HAL_UART_Transmit>
}
 8000b48:	bf00      	nop
 8000b4a:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b54:	b003      	add	sp, #12
 8000b56:	4770      	bx	lr
 8000b58:	0800643c 	.word	0x0800643c
 8000b5c:	08006420 	.word	0x08006420
 8000b60:	08006428 	.word	0x08006428
 8000b64:	200001f0 	.word	0x200001f0

08000b68 <LogI>:

void LogI(const char *tag,const char *format, ...){
 8000b68:	b40e      	push	{r1, r2, r3}
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8000b70:	af04      	add	r7, sp, #16
 8000b72:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8000b76:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000b7a:	6018      	str	r0, [r3, #0]
	va_list arg_ptr;
	char logstr[255],lineBuff[300];
	va_start(arg_ptr, format);
 8000b7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000b80:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	vsnprintf(logstr, 255, format, arg_ptr);
 8000b84:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8000b88:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000b8c:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000b90:	21ff      	movs	r1, #255	@ 0xff
 8000b92:	f004 ff4b 	bl	8005a2c <vsniprintf>
	va_end(arg_ptr);
	sprintf(lineBuff,"%s %lu [%s] %s %s\r\n",ANSI_COLOR_GREEN,HAL_GetTick(),tag,logstr,ANSI_COLOR_RESET);
 8000b96:	f001 f8b3 	bl	8001d00 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	f107 0008 	add.w	r0, r7, #8
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <LogI+0x84>)
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8000bae:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LogI+0x88>)
 8000bba:	490e      	ldr	r1, [pc, #56]	@ (8000bf4 <LogI+0x8c>)
 8000bbc:	f004 feea 	bl	8005994 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)lineBuff,strlen(lineBuff),HAL_MAX_DELAY);
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb23 	bl	8000210 <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 0108 	add.w	r1, r7, #8
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	4808      	ldr	r0, [pc, #32]	@ (8000bf8 <LogI+0x90>)
 8000bd8:	f003 ff2a 	bl	8004a30 <HAL_UART_Transmit>
}
 8000bdc:	bf00      	nop
 8000bde:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8000be2:	46bd      	mov	sp, r7
 8000be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000be8:	b003      	add	sp, #12
 8000bea:	4770      	bx	lr
 8000bec:	0800643c 	.word	0x0800643c
 8000bf0:	08006444 	.word	0x08006444
 8000bf4:	08006428 	.word	0x08006428
 8000bf8:	200001f0 	.word	0x200001f0

08000bfc <LogE>:
	va_end(arg_ptr);
	sprintf(lineBuff,"%s %lu [%s] %s %s\r\n",ANSI_COLOR_YELLOW,HAL_GetTick(),tag,logstr,ANSI_COLOR_RESET);
	HAL_UART_Transmit(&huart2,(uint8_t*)lineBuff,strlen(lineBuff),HAL_MAX_DELAY);
}

void LogE(const char *tag,const char *format, ...){
 8000bfc:	b40e      	push	{r1, r2, r3}
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8000c0a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000c0e:	6018      	str	r0, [r3, #0]
	va_list arg_ptr;
	char logstr[255],lineBuff[300];
	va_start(arg_ptr, format);
 8000c10:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000c14:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	vsnprintf(logstr, 255, format, arg_ptr);
 8000c18:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8000c1c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8000c20:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000c24:	21ff      	movs	r1, #255	@ 0xff
 8000c26:	f004 ff01 	bl	8005a2c <vsniprintf>
	va_end(arg_ptr);
	sprintf(lineBuff,"%s %lu [%s] %s %s\r\n",ANSI_COLOR_RED,HAL_GetTick(),tag,logstr,ANSI_COLOR_RESET);
 8000c2a:	f001 f869 	bl	8001d00 <HAL_GetTick>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f107 0008 	add.w	r0, r7, #8
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <LogE+0x84>)
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8000c42:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LogE+0x88>)
 8000c4e:	490e      	ldr	r1, [pc, #56]	@ (8000c88 <LogE+0x8c>)
 8000c50:	f004 fea0 	bl	8005994 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)lineBuff,strlen(lineBuff),HAL_MAX_DELAY);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fad9 	bl	8000210 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f107 0108 	add.w	r1, r7, #8
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	4808      	ldr	r0, [pc, #32]	@ (8000c8c <LogE+0x90>)
 8000c6c:	f003 fee0 	bl	8004a30 <HAL_UART_Transmit>
}
 8000c70:	bf00      	nop
 8000c72:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8000c76:	46bd      	mov	sp, r7
 8000c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c7c:	b003      	add	sp, #12
 8000c7e:	4770      	bx	lr
 8000c80:	0800643c 	.word	0x0800643c
 8000c84:	08006454 	.word	0x08006454
 8000c88:	08006428 	.word	0x08006428
 8000c8c:	200001f0 	.word	0x200001f0

08000c90 <LogArray>:

void LogArray(unsigned char *arr, int length,const char *tag, const char *format, ...){
 8000c90:	b408      	push	{r3}
 8000c92:	b580      	push	{r7, lr}
 8000c94:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000c9e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8000ca2:	6018      	str	r0, [r3, #0]
 8000ca4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000ca8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000cac:	6019      	str	r1, [r3, #0]
 8000cae:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000cb2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000cb6:	601a      	str	r2, [r3, #0]
	va_list arg_ptr;
	char logstr[255],lineBuff[300];
	if(length>200){
 8000cb8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000cbc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8000cc4:	dd09      	ble.n	8000cda <LogArray+0x4a>
		LogE((const char *)"DBG",(const char *)"print array length(%d) avoided to prevent segmentation error", length);
 8000cc6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000cca:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4927      	ldr	r1, [pc, #156]	@ (8000d70 <LogArray+0xe0>)
 8000cd2:	4828      	ldr	r0, [pc, #160]	@ (8000d74 <LogArray+0xe4>)
 8000cd4:	f7ff ff92 	bl	8000bfc <LogE>
 8000cd8:	e042      	b.n	8000d60 <LogArray+0xd0>
		return;
	}
	va_start(arg_ptr, format);
 8000cda:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000cde:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
	vsnprintf(logstr, 255, format, arg_ptr);
 8000ce2:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8000ce6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000cea:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000cee:	21ff      	movs	r1, #255	@ 0xff
 8000cf0:	f004 fe9c 	bl	8005a2c <vsniprintf>
	va_end(arg_ptr);
	byte2HexNbl((unsigned char *) logstr, (unsigned char *) arr, 0, length, ' ', 1);
 8000cf4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000cf8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000cfc:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8000d00:	f5a2 710d 	sub.w	r1, r2, #564	@ 0x234
 8000d04:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8000d08:	2201      	movs	r2, #1
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	9200      	str	r2, [sp, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	6809      	ldr	r1, [r1, #0]
 8000d16:	f000 fb31 	bl	800137c <byte2HexNbl>
	sprintf(lineBuff,"%s %lu [%s] %s %s\r\n",ANSI_COLOR_GREEN,HAL_GetTick(),tag,logstr,ANSI_COLOR_RESET);
 8000d1a:	f000 fff1 	bl	8001d00 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	f107 0010 	add.w	r0, r7, #16
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <LogArray+0xe8>)
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000d32:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d7c <LogArray+0xec>)
 8000d3e:	4910      	ldr	r1, [pc, #64]	@ (8000d80 <LogArray+0xf0>)
 8000d40:	f004 fe28 	bl	8005994 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)lineBuff,strlen(lineBuff),HAL_MAX_DELAY);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fa61 	bl	8000210 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0110 	add.w	r1, r7, #16
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	480a      	ldr	r0, [pc, #40]	@ (8000d84 <LogArray+0xf4>)
 8000d5c:	f003 fe68 	bl	8004a30 <HAL_UART_Transmit>
}
 8000d60:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8000d64:	46bd      	mov	sp, r7
 8000d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d6a:	b001      	add	sp, #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	0800645c 	.word	0x0800645c
 8000d74:	0800649c 	.word	0x0800649c
 8000d78:	0800643c 	.word	0x0800643c
 8000d7c:	08006444 	.word	0x08006444
 8000d80:	08006428 	.word	0x08006428
 8000d84:	200001f0 	.word	0x200001f0

08000d88 <TIMER6_Init>:
void TIMER6_Init(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <TIMER6_Init+0x40>)
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <TIMER6_Init+0x44>)
 8000d90:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 1024;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <TIMER6_Init+0x40>)
 8000d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d98:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 8780.48780487805-1;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <TIMER6_Init+0x40>)
 8000d9c:	f242 224b 	movw	r2, #8779	@ 0x224b
 8000da0:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htim6) != HAL_OK ){
 8000da2:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <TIMER6_Init+0x40>)
 8000da4:	f002 ff30 	bl	8003c08 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <TIMER6_Init+0x32>
		LogE(TAG,(const char*)"Error while initializing TIM6");
 8000dae:	4908      	ldr	r1, [pc, #32]	@ (8000dd0 <TIMER6_Init+0x48>)
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <TIMER6_Init+0x4c>)
 8000db2:	f7ff ff23 	bl	8000bfc <LogE>
		Error_handler();
 8000db6:	f7ff fe89 	bl	8000acc <Error_handler>
	}
	LogI(TAG,(const char*)"TIM6_Initialized ");
 8000dba:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <TIMER6_Init+0x50>)
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <TIMER6_Init+0x4c>)
 8000dbe:	f7ff fed3 	bl	8000b68 <LogI>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000118 	.word	0x20000118
 8000dcc:	40001000 	.word	0x40001000
 8000dd0:	080064a0 	.word	0x080064a0
 8000dd4:	080063d0 	.word	0x080063d0
 8000dd8:	080064c0 	.word	0x080064c0

08000ddc <TIMER7_Init>:

void TIMER7_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  htim7.Instance = TIM7;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <TIMER7_Init+0x40>)
 8000de2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e20 <TIMER7_Init+0x44>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1024;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <TIMER7_Init+0x40>)
 8000de8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dec:	605a      	str	r2, [r3, #4]
  htim7.Init.Period = 8780.48780487805-1;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <TIMER7_Init+0x40>)
 8000df0:	f242 224b 	movw	r2, #8779	@ 0x224b
 8000df4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000df6:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <TIMER7_Init+0x40>)
 8000df8:	f002 ff06 	bl	8003c08 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <TIMER7_Init+0x32>
  {
	  LogE(TAG,(const char*)"Error while initializing TIM6");
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <TIMER7_Init+0x48>)
 8000e04:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <TIMER7_Init+0x4c>)
 8000e06:	f7ff fef9 	bl	8000bfc <LogE>
    Error_handler();
 8000e0a:	f7ff fe5f 	bl	8000acc <Error_handler>
  }
  LogI(TAG,(const char*)"TIM7_Initialized ");
 8000e0e:	4907      	ldr	r1, [pc, #28]	@ (8000e2c <TIMER7_Init+0x50>)
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <TIMER7_Init+0x4c>)
 8000e12:	f7ff fea9 	bl	8000b68 <LogI>

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000160 	.word	0x20000160
 8000e20:	40001400 	.word	0x40001400
 8000e24:	080064a0 	.word	0x080064a0
 8000e28:	080063d0 	.word	0x080063d0
 8000e2c:	080064d4 	.word	0x080064d4

08000e30 <CAN1_Init>:


void CAN1_Init(void){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	//	memset(&rx_can_info,0,sizeof(rx_can_info));
	hcan1.Instance = CAN1;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e36:	4a1d      	ldr	r2, [pc, #116]	@ (8000eac <CAN1_Init+0x7c>)
 8000e38:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	775a      	strb	r2, [r3, #29]
	//Settings related to CAN bit timings
	hcan1.Init.Prescaler = 5;
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e66:	2205      	movs	r2, #5
 8000e68:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e72:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e76:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e7e:	615a      	str	r2, [r3, #20]

	if ( HAL_CAN_Init (&hcan1) != HAL_OK){
 8000e80:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <CAN1_Init+0x78>)
 8000e82:	f000 ff49 	bl	8001d18 <HAL_CAN_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <CAN1_Init+0x6a>
		LogE(TAG,(const char *)"Error while Initializing" );
 8000e8c:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <CAN1_Init+0x80>)
 8000e8e:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <CAN1_Init+0x84>)
 8000e90:	f7ff feb4 	bl	8000bfc <LogE>
		Error_handler();
 8000e94:	f7ff fe1a 	bl	8000acc <Error_handler>
	}else
		LogI(TAG,(const char *)"Initialized Successfully" );

}
 8000e98:	e003      	b.n	8000ea2 <CAN1_Init+0x72>
		LogI(TAG,(const char *)"Initialized Successfully" );
 8000e9a:	4907      	ldr	r1, [pc, #28]	@ (8000eb8 <CAN1_Init+0x88>)
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <CAN1_Init+0x84>)
 8000e9e:	f7ff fe63 	bl	8000b68 <LogI>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000238 	.word	0x20000238
 8000eac:	40006400 	.word	0x40006400
 8000eb0:	080064e8 	.word	0x080064e8
 8000eb4:	080063d0 	.word	0x080063d0
 8000eb8:	08006504 	.word	0x08006504

08000ebc <CAN_Filter_Config>:

void CAN_Filter_Config(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	@ 0x50
 8000ec0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;
	CAN_FilterTypeDef can2_filter_init;


	can1_filter_init.FilterActivation = ENABLE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
	can1_filter_init.FilterBank  = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
	can1_filter_init.FilterIdHigh = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
	can1_filter_init.FilterIdLow = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can1_filter_init.FilterMaskIdHigh = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
	can1_filter_init.FilterMaskIdLow = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	@ 0x34
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	643b      	str	r3, [r7, #64]	@ 0x40
	can1_filter_init.FilterScale = CAN_FILTERSCALE_16BIT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	647b      	str	r3, [r7, #68]	@ 0x44
	can1_filter_init.SlaveStartFilterBank = 14;
 8000ee6:	230e      	movs	r3, #14
 8000ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK){
 8000eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481d      	ldr	r0, [pc, #116]	@ (8000f68 <CAN_Filter_Config+0xac>)
 8000ef2:	f001 f80d 	bl	8001f10 <HAL_CAN_ConfigFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <CAN_Filter_Config+0x4e>
		LogE(TAG,(const char *)"Error while ConfigFilter CAN1 " );
 8000efc:	491b      	ldr	r1, [pc, #108]	@ (8000f6c <CAN_Filter_Config+0xb0>)
 8000efe:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <CAN_Filter_Config+0xb4>)
 8000f00:	f7ff fe7c 	bl	8000bfc <LogE>
		Error_handler();
 8000f04:	f7ff fde2 	bl	8000acc <Error_handler>
 8000f08:	e003      	b.n	8000f12 <CAN_Filter_Config+0x56>
	}else
		LogI(TAG,(const char *)"Configured Filter for CAN1" );
 8000f0a:	491a      	ldr	r1, [pc, #104]	@ (8000f74 <CAN_Filter_Config+0xb8>)
 8000f0c:	4818      	ldr	r0, [pc, #96]	@ (8000f70 <CAN_Filter_Config+0xb4>)
 8000f0e:	f7ff fe2b 	bl	8000b68 <LogI>

	can2_filter_init.FilterActivation = ENABLE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
	can2_filter_init.FilterBank  = 14;
 8000f16:	230e      	movs	r3, #14
 8000f18:	617b      	str	r3, [r7, #20]
	can2_filter_init.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
	can2_filter_init.FilterIdHigh = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
	can2_filter_init.FilterIdLow = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
	can2_filter_init.FilterMaskIdHigh = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
	can2_filter_init.FilterMaskIdLow = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
	can2_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
	can2_filter_init.FilterScale = CAN_FILTERSCALE_16BIT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
	can2_filter_init.SlaveStartFilterBank = 14;
 8000f36:	230e      	movs	r3, #14
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24

	if( HAL_CAN_ConfigFilter(&hcan2,&can2_filter_init) != HAL_OK){
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <CAN_Filter_Config+0xbc>)
 8000f40:	f000 ffe6 	bl	8001f10 <HAL_CAN_ConfigFilter>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <CAN_Filter_Config+0x9c>
		LogE(TAG,(const char *)"Error while ConfigFilter CAN2" );
 8000f4a:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <CAN_Filter_Config+0xc0>)
 8000f4c:	4808      	ldr	r0, [pc, #32]	@ (8000f70 <CAN_Filter_Config+0xb4>)
 8000f4e:	f7ff fe55 	bl	8000bfc <LogE>
		Error_handler();
 8000f52:	f7ff fdbb 	bl	8000acc <Error_handler>
	}else
		LogI(TAG,(const char *)"Configured Filter for CAN2" );
}
 8000f56:	e003      	b.n	8000f60 <CAN_Filter_Config+0xa4>
		LogI(TAG,(const char *)"Configured Filter for CAN2" );
 8000f58:	4909      	ldr	r1, [pc, #36]	@ (8000f80 <CAN_Filter_Config+0xc4>)
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <CAN_Filter_Config+0xb4>)
 8000f5c:	f7ff fe04 	bl	8000b68 <LogI>
}
 8000f60:	bf00      	nop
 8000f62:	3750      	adds	r7, #80	@ 0x50
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000238 	.word	0x20000238
 8000f6c:	08006520 	.word	0x08006520
 8000f70:	080063d0 	.word	0x080063d0
 8000f74:	08006540 	.word	0x08006540
 8000f78:	20000260 	.word	0x20000260
 8000f7c:	0800655c 	.word	0x0800655c
 8000f80:	0800657c 	.word	0x0800657c

08000f84 <CAN1_Start>:

HAL_StatusTypeDef CAN1_Start(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef ret_stats=HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if((ret_stats = HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF))!= HAL_OK){
 8000f8e:	f240 4103 	movw	r1, #1027	@ 0x403
 8000f92:	4814      	ldr	r0, [pc, #80]	@ (8000fe4 <CAN1_Start+0x60>)
 8000f94:	f001 fad2 	bl	800253c <HAL_CAN_ActivateNotification>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <CAN1_Start+0x2e>
		LogE(TAG,(const char *)"Error:%d HAL_CAN_ActivateNotification",ret_stats );
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4910      	ldr	r1, [pc, #64]	@ (8000fe8 <CAN1_Start+0x64>)
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <CAN1_Start+0x68>)
 8000faa:	f7ff fe27 	bl	8000bfc <LogE>
		return ret_stats;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	e014      	b.n	8000fdc <CAN1_Start+0x58>
	}
	if((ret_stats = HAL_CAN_Start(&hcan1)) != HAL_OK){
 8000fb2:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <CAN1_Start+0x60>)
 8000fb4:	f001 f88c 	bl	80020d0 <HAL_CAN_Start>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <CAN1_Start+0x4e>
		LogE(TAG,(const char *)"Error:%d HAL_CAN_Start",ret_stats );
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	490a      	ldr	r1, [pc, #40]	@ (8000ff0 <CAN1_Start+0x6c>)
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <CAN1_Start+0x68>)
 8000fca:	f7ff fe17 	bl	8000bfc <LogE>
		return ret_stats;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	e004      	b.n	8000fdc <CAN1_Start+0x58>
	}
	LogI(TAG,(const char *)"CAN 1 Started Successfully");
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <CAN1_Start+0x70>)
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <CAN1_Start+0x68>)
 8000fd6:	f7ff fdc7 	bl	8000b68 <LogI>
	return ret_stats;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000238 	.word	0x20000238
 8000fe8:	08006598 	.word	0x08006598
 8000fec:	080063d0 	.word	0x080063d0
 8000ff0:	080065c0 	.word	0x080065c0
 8000ff4:	080065d8 	.word	0x080065d8

08000ff8 <CAN1_Send>:

void CAN1_Send(uint32_t id,uint8_t msg[],uint32_t len){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	TxHeader.DLC = len;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.StdId = id;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE   = CAN_ID_STD;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24

	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,msg,&TxMailbox) != HAL_OK){
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	f107 0118 	add.w	r1, r7, #24
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	480a      	ldr	r0, [pc, #40]	@ (8001048 <CAN1_Send+0x50>)
 8001020:	f001 f89a 	bl	8002158 <HAL_CAN_AddTxMessage>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <CAN1_Send+0x3e>
		LogE(TAG,(const char *)"Error while Adding Message:%#x",id );
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <CAN1_Send+0x54>)
 800102e:	4808      	ldr	r0, [pc, #32]	@ (8001050 <CAN1_Send+0x58>)
 8001030:	f7ff fde4 	bl	8000bfc <LogE>
		//Error_handler();
	}else{
		LogI(TAG,(const char *)"Added Message:%#x",id );
	}
}
 8001034:	e004      	b.n	8001040 <CAN1_Send+0x48>
		LogI(TAG,(const char *)"Added Message:%#x",id );
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4906      	ldr	r1, [pc, #24]	@ (8001054 <CAN1_Send+0x5c>)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <CAN1_Send+0x58>)
 800103c:	f7ff fd94 	bl	8000b68 <LogI>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	@ 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000238 	.word	0x20000238
 800104c:	080065f4 	.word	0x080065f4
 8001050:	080063d0 	.word	0x080063d0
 8001054:	08006614 	.word	0x08006614

08001058 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	LogD(TAG,(const char *)"CAN Message Transmitted:M0");
 8001060:	4903      	ldr	r1, [pc, #12]	@ (8001070 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8001062:	4804      	ldr	r0, [pc, #16]	@ (8001074 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001064:	f7ff fd36 	bl	8000ad4 <LogD>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08006628 	.word	0x08006628
 8001074:	080063d0 	.word	0x080063d0

08001078 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	LogD(TAG,(const char *)"CAN Message Transmitted:M1");
 8001080:	4903      	ldr	r1, [pc, #12]	@ (8001090 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8001082:	4804      	ldr	r0, [pc, #16]	@ (8001094 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8001084:	f7ff fd26 	bl	8000ad4 <LogD>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08006644 	.word	0x08006644
 8001094:	080063d0 	.word	0x080063d0

08001098 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	LogD(TAG,(const char *)"CAN Message Transmitted:M2");
 80010a0:	4903      	ldr	r1, [pc, #12]	@ (80010b0 <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 80010a2:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80010a4:	f7ff fd16 	bl	8000ad4 <LogD>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	08006660 	.word	0x08006660
 80010b4:	080063d0 	.word	0x080063d0

080010b8 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2120      	movs	r1, #32
 80010c4:	482f      	ldr	r0, [pc, #188]	@ (8001184 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80010c6:	f001 ff9f 	bl	8003008 <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK){
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	482e      	ldr	r0, [pc, #184]	@ (800118c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80010d4:	f001 f910 	bl	80022f8 <HAL_CAN_GetRxMessage>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		Error_handler();
 80010de:	f7ff fcf5 	bl	8000acc <Error_handler>
	}
	uint32_t recievd_time = HAL_GetTick();
 80010e2:	f000 fe0d 	bl	8001d00 <HAL_GetTick>
 80010e6:	6178      	str	r0, [r7, #20]
	rx_can_info.id = RxHeader.ExtId;
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80010ee:	6013      	str	r3, [r2, #0]
	rx_can_info.length = RxHeader.DLC;
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4a26      	ldr	r2, [pc, #152]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80010f6:	60d3      	str	r3, [r2, #12]
	memcpy(rx_can_info.msg,rcvd_msg,RxHeader.DLC);
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	4824      	ldr	r0, [pc, #144]	@ (8001194 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8001104:	f004 fcec 	bl	8005ae0 <memcpy>
	rx_can_info.isRxcvd = true;
 8001108:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800110a:	2201      	movs	r2, #1
 800110c:	741a      	strb	r2, [r3, #16]
	LogArray((unsigned char *)rcvd_msg,RxHeader.DLC, TAG,(const char *)"Received CAN ID : %#x message status %x:",rx_can_info.id,rcvd_msg);
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	4619      	mov	r1, r3
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f107 000c 	add.w	r0, r7, #12
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001128:	f7ff fdb2 	bl	8000c90 <LogArray>
		LogArray((unsigned char *)rcvd_msg,RxHeader.DLC, TAG,(const char *)"%d",recievd_time);
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4619      	mov	r1, r3
 8001132:	f107 000c 	add.w	r0, r7, #12
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 800113c:	4a17      	ldr	r2, [pc, #92]	@ (800119c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 800113e:	f7ff fda7 	bl	8000c90 <LogArray>

	   if(rx_can_info.id == 0x100)
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800114a:	d116      	bne.n	800117a <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
	{
	dutyX = rcvd_msg[0];
 800114c:	7b3b      	ldrb	r3, [r7, #12]
 800114e:	461a      	mov	r2, r3
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8001152:	601a      	str	r2, [r3, #0]
	dutyY = rcvd_msg[1];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	461a      	mov	r2, r3
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800115a:	601a      	str	r2, [r3, #0]
	LogArray((unsigned char *)rcvd_msg,RxHeader.DLC, TAG,(const char *)"Received CAN ID : %#x message status: :",rx_can_info.id,rcvd_msg);
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4619      	mov	r1, r3
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f107 000c 	add.w	r0, r7, #12
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001174:	4a09      	ldr	r2, [pc, #36]	@ (800119c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8001176:	f7ff fd8b 	bl	8000c90 <LogArray>


	}

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020000 	.word	0x40020000
 8001188:	20000288 	.word	0x20000288
 800118c:	20000238 	.word	0x20000238
 8001190:	200002a4 	.word	0x200002a4
 8001194:	200002a8 	.word	0x200002a8
 8001198:	0800667c 	.word	0x0800667c
 800119c:	080063d0 	.word	0x080063d0
 80011a0:	080066a8 	.word	0x080066a8
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004
 80011ac:	080066ac 	.word	0x080066ac

080011b0 <HAL_CAN_RxFifo1MsgPendingCallback>:



void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t rcvd_msg[8];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2120      	movs	r1, #32
 80011bc:	4821      	ldr	r0, [pc, #132]	@ (8001244 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 80011be:	f001 ff23 	bl	8003008 <HAL_GPIO_WritePin>

	if(HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader,rcvd_msg) != HAL_OK){
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	4820      	ldr	r0, [pc, #128]	@ (800124c <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 80011cc:	f001 f894 	bl	80022f8 <HAL_CAN_GetRxMessage>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
			Error_handler();
 80011d6:	f7ff fc79 	bl	8000acc <Error_handler>
		}
	rx_can_info.id = RxHeader.ExtId;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 80011e0:	6013      	str	r3, [r2, #0]
	rx_can_info.length = RxHeader.DLC;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001250 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 80011e8:	60d3      	str	r3, [r2, #12]
	memcpy(rx_can_info.msg,rcvd_msg,RxHeader.DLC);
 80011ea:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	4817      	ldr	r0, [pc, #92]	@ (8001254 <HAL_CAN_RxFifo1MsgPendingCallback+0xa4>)
 80011f6:	f004 fc73 	bl	8005ae0 <memcpy>
	rx_can_info.isRxcvd = true;
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	741a      	strb	r2, [r3, #16]

	LogArray((unsigned char *)rcvd_msg,RxHeader.DLC, TAG,(const char *)"Received CAN ID : %#x message status %x:",rx_can_info.id,rcvd_msg);
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4619      	mov	r1, r3
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f107 0008 	add.w	r0, r7, #8
 800120e:	f107 0208 	add.w	r2, r7, #8
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_CAN_RxFifo1MsgPendingCallback+0xa8>)
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_CAN_RxFifo1MsgPendingCallback+0xac>)
 800121a:	f7ff fd39 	bl	8000c90 <LogArray>
 if(RxHeader.ExtId==0x933)
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f640 1233 	movw	r2, #2355	@ 0x933
 8001226:	4293      	cmp	r3, r2
 8001228:	d107      	bne.n	800123a <HAL_CAN_RxFifo1MsgPendingCallback+0x8a>
 {
	 CAN1_Send(0x200, rcvd_msg, 8);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2208      	movs	r2, #8
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001236:	f7ff fedf 	bl	8000ff8 <CAN1_Send>
 }

}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020000 	.word	0x40020000
 8001248:	20000288 	.word	0x20000288
 800124c:	20000260 	.word	0x20000260
 8001250:	200002a4 	.word	0x200002a4
 8001254:	200002a8 	.word	0x200002a8
 8001258:	0800667c 	.word	0x0800667c
 800125c:	080063d0 	.word	0x080063d0

08001260 <con>:


int con(int input) {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    return 1800 - (input*2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f5c3 7361 	rsb	r3, r3, #900	@ 0x384
 800126e:	005b      	lsls	r3, r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <CAN2_Init>:


void CAN2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

	hcan2.Instance = CAN2;
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <CAN2_Init+0x78>)
 8001282:	4a1d      	ldr	r2, [pc, #116]	@ (80012f8 <CAN2_Init+0x7c>)
 8001284:	601a      	str	r2, [r3, #0]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <CAN2_Init+0x78>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
	hcan2.Init.AutoBusOff = ENABLE;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <CAN2_Init+0x78>)
 800128e:	2201      	movs	r2, #1
 8001290:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoRetransmission = ENABLE;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <CAN2_Init+0x78>)
 8001294:	2201      	movs	r2, #1
 8001296:	76da      	strb	r2, [r3, #27]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <CAN2_Init+0x78>)
 800129a:	2200      	movs	r2, #0
 800129c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <CAN2_Init+0x78>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <CAN2_Init+0x78>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <CAN2_Init+0x78>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	775a      	strb	r2, [r3, #29]
	//Settings related to CAN bit timings
	hcan2.Init.Prescaler = 5;
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <CAN2_Init+0x78>)
 80012b2:	2205      	movs	r2, #5
 80012b4:	605a      	str	r2, [r3, #4]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <CAN2_Init+0x78>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <CAN2_Init+0x78>)
 80012be:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80012c2:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <CAN2_Init+0x78>)
 80012c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80012ca:	615a      	str	r2, [r3, #20]

	if ( HAL_CAN_Init (&hcan2) != HAL_OK){
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <CAN2_Init+0x78>)
 80012ce:	f000 fd23 	bl	8001d18 <HAL_CAN_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <CAN2_Init+0x6a>
		LogE(TAG,(const char *)"Error while Initializing" );
 80012d8:	4908      	ldr	r1, [pc, #32]	@ (80012fc <CAN2_Init+0x80>)
 80012da:	4809      	ldr	r0, [pc, #36]	@ (8001300 <CAN2_Init+0x84>)
 80012dc:	f7ff fc8e 	bl	8000bfc <LogE>
		Error_handler();
 80012e0:	f7ff fbf4 	bl	8000acc <Error_handler>
	}else
		LogI(TAG,(const char *)"Initialized Successfully" );

}
 80012e4:	e003      	b.n	80012ee <CAN2_Init+0x72>
		LogI(TAG,(const char *)"Initialized Successfully" );
 80012e6:	4907      	ldr	r1, [pc, #28]	@ (8001304 <CAN2_Init+0x88>)
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <CAN2_Init+0x84>)
 80012ea:	f7ff fc3d 	bl	8000b68 <LogI>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000260 	.word	0x20000260
 80012f8:	40006800 	.word	0x40006800
 80012fc:	080064e8 	.word	0x080064e8
 8001300:	080063d0 	.word	0x080063d0
 8001304:	08006504 	.word	0x08006504

08001308 <CAN2_Start>:

HAL_StatusTypeDef CAN2_Start(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef ret_stats=HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	if((ret_stats = HAL_CAN_ActivateNotification(&hcan2,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO1_MSG_PENDING|CAN_IT_BUSOFF))!= HAL_OK){
 8001312:	f240 4111 	movw	r1, #1041	@ 0x411
 8001316:	4814      	ldr	r0, [pc, #80]	@ (8001368 <CAN2_Start+0x60>)
 8001318:	f001 f910 	bl	800253c <HAL_CAN_ActivateNotification>
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <CAN2_Start+0x2e>
		LogE(TAG,(const char *)"Error:%d HAL_CAN_ActivateNotification",ret_stats );
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	461a      	mov	r2, r3
 800132a:	4910      	ldr	r1, [pc, #64]	@ (800136c <CAN2_Start+0x64>)
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <CAN2_Start+0x68>)
 800132e:	f7ff fc65 	bl	8000bfc <LogE>
		return ret_stats;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	e014      	b.n	8001360 <CAN2_Start+0x58>
	}
	if((ret_stats = HAL_CAN_Start(&hcan2)) != HAL_OK){
 8001336:	480c      	ldr	r0, [pc, #48]	@ (8001368 <CAN2_Start+0x60>)
 8001338:	f000 feca 	bl	80020d0 <HAL_CAN_Start>
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <CAN2_Start+0x4e>
		LogE(TAG,(const char *)"Error:%d HAL_CAN_Start",ret_stats );
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	461a      	mov	r2, r3
 800134a:	490a      	ldr	r1, [pc, #40]	@ (8001374 <CAN2_Start+0x6c>)
 800134c:	4808      	ldr	r0, [pc, #32]	@ (8001370 <CAN2_Start+0x68>)
 800134e:	f7ff fc55 	bl	8000bfc <LogE>
		return ret_stats;
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	e004      	b.n	8001360 <CAN2_Start+0x58>
	}
	LogI(TAG,(const char *)"CAN Started Successfully");
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <CAN2_Start+0x70>)
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <CAN2_Start+0x68>)
 800135a:	f7ff fc05 	bl	8000b68 <LogI>
	return ret_stats;
 800135e:	79fb      	ldrb	r3, [r7, #7]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000260 	.word	0x20000260
 800136c:	08006598 	.word	0x08006598
 8001370:	080063d0 	.word	0x080063d0
 8001374:	080065c0 	.word	0x080065c0
 8001378:	080066d4 	.word	0x080066d4

0800137c <byte2HexNbl>:
		LogI(TAG,(const char *)"Added Message CAN2:%#x",id );
	}
}


void byte2HexNbl(unsigned char *dest, unsigned char *data, int start, int end, char separator, int append){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b0cd      	sub	sp, #308	@ 0x134
 8001380:	af00      	add	r7, sp, #0
 8001382:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8001386:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800138a:	6020      	str	r0, [r4, #0]
 800138c:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8001390:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8001394:	6001      	str	r1, [r0, #0]
 8001396:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800139a:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800139e:	600a      	str	r2, [r1, #0]
 80013a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80013a4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80013a8:	6013      	str	r3, [r2, #0]
	int i, j;
	const char* pNibbleHex = {"0123456789ABCDEF"};
 80013aa:	4b65      	ldr	r3, [pc, #404]	@ (8001540 <byte2HexNbl+0x1c4>)
 80013ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int ndxMul = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	int sepLen = (separator == '\0') ? 1 : end - start;
 80013b6:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <byte2HexNbl+0x5a>
 80013be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013c2:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 80013c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	e000      	b.n	80013d8 <byte2HexNbl+0x5c>
 80013d6:	2301      	movs	r3, #1
 80013d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	int nLength = ((end - start) * 2) + sepLen;
 80013dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013e0:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 80013e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013f8:	4413      	add	r3, r2
 80013fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	char pBuffer[255];
	pBuffer[0] = 0;
 80013fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001402:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
	pBuffer[nLength] = 0;
 800140a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800140e:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8001412:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001416:	4413      	add	r3, r2
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
	if (sepLen > 1)
 800141c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001420:	2b01      	cmp	r3, #1
 8001422:	dd02      	ble.n	800142a <byte2HexNbl+0xae>
		ndxMul = 3;
 8001424:	2303      	movs	r3, #3
 8001426:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	for (i = start, j = 0; i < end; i++, j++) {
 800142a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800142e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800143e:	e058      	b.n	80014f2 <byte2HexNbl+0x176>
		// divide by 16
		int nNibble = *(data + i) >> 4;
 8001440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001444:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001448:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		pBuffer[ndxMul * j] = pNibbleHex[nNibble];
 800145a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800145e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8001462:	441a      	add	r2, r3
 8001464:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001468:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	7811      	ldrb	r1, [r2, #0]
 8001472:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001476:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800147a:	54d1      	strb	r1, [r2, r3]

		nNibble = *(data + i) & 0x0F;
 800147c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001480:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001484:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		pBuffer[ndxMul * j + 1] = pNibbleHex[nNibble];
 8001496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800149a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800149e:	441a      	add	r2, r3
 80014a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014a4:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	7811      	ldrb	r1, [r2, #0]
 80014b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80014b4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80014b8:	54d1      	strb	r1, [r2, r3]

		if (sepLen > 1)
 80014ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	dd0d      	ble.n	80014de <byte2HexNbl+0x162>
			pBuffer[ndxMul * j + 2] = separator;
 80014c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	3302      	adds	r3, #2
 80014d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80014d4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80014d8:	f897 1140 	ldrb.w	r1, [r7, #320]	@ 0x140
 80014dc:	54d1      	strb	r1, [r2, r3]
	for (i = start, j = 0; i < end; i++, j++) {
 80014de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80014e2:	3301      	adds	r3, #1
 80014e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80014e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014ec:	3301      	adds	r3, #1
 80014ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80014f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	db9d      	blt.n	8001440 <byte2HexNbl+0xc4>
	}
	if (append == 1)
 8001504:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10a      	bne.n	8001522 <byte2HexNbl+0x1a6>
		strcat((char*) dest, (char*) pBuffer);
 800150c:	f107 0214 	add.w	r2, r7, #20
 8001510:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001514:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001518:	4611      	mov	r1, r2
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f004 fa9c 	bl	8005a58 <strcat>

	else
		strcpy((char*) dest, (char*) pBuffer);
}
 8001520:	e009      	b.n	8001536 <byte2HexNbl+0x1ba>
		strcpy((char*) dest, (char*) pBuffer);
 8001522:	f107 0214 	add.w	r2, r7, #20
 8001526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800152a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800152e:	4611      	mov	r1, r2
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	f004 facd 	bl	8005ad0 <strcpy>
}
 8001536:	bf00      	nop
 8001538:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	0800672c 	.word	0x0800672c

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001558:	6453      	str	r3, [r2, #68]	@ 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f001 fad8 	bl	8002b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a63      	ldr	r2, [pc, #396]	@ (8001740 <HAL_CAN_MspInit+0x1ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d156      	bne.n	8001664 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <HAL_CAN_MspInit+0x1b0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a61      	ldr	r2, [pc, #388]	@ (8001744 <HAL_CAN_MspInit+0x1b0>)
 80015be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015c0:	4b60      	ldr	r3, [pc, #384]	@ (8001744 <HAL_CAN_MspInit+0x1b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10d      	bne.n	80015e4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	4b57      	ldr	r3, [pc, #348]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4a56      	ldr	r2, [pc, #344]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f4:	4b54      	ldr	r3, [pc, #336]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001600:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001612:	2309      	movs	r3, #9
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	484b      	ldr	r0, [pc, #300]	@ (800174c <HAL_CAN_MspInit+0x1b8>)
 800161e:	f001 fb5f 	bl	8002ce0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2013      	movs	r0, #19
 8001628:	f001 fa91 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800162c:	2013      	movs	r0, #19
 800162e:	f001 faaa 	bl	8002b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2014      	movs	r0, #20
 8001638:	f001 fa89 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800163c:	2014      	movs	r0, #20
 800163e:	f001 faa2 	bl	8002b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2015      	movs	r0, #21
 8001648:	f001 fa81 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800164c:	2015      	movs	r0, #21
 800164e:	f001 fa9a 	bl	8002b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2016      	movs	r0, #22
 8001658:	f001 fa79 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800165c:	2016      	movs	r0, #22
 800165e:	f001 fa92 	bl	8002b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001662:	e068      	b.n	8001736 <HAL_CAN_MspInit+0x1a2>
  else if(hcan->Instance==CAN2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a39      	ldr	r2, [pc, #228]	@ (8001750 <HAL_CAN_MspInit+0x1bc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d163      	bne.n	8001736 <HAL_CAN_MspInit+0x1a2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a34      	ldr	r2, [pc, #208]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 8001678:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800168a:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <HAL_CAN_MspInit+0x1b0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a2c      	ldr	r2, [pc, #176]	@ (8001744 <HAL_CAN_MspInit+0x1b0>)
 8001692:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_CAN_MspInit+0x1b0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d10d      	bne.n	80016b8 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80016a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <HAL_CAN_MspInit+0x1b4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016d4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80016e6:	2309      	movs	r3, #9
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4818      	ldr	r0, [pc, #96]	@ (8001754 <HAL_CAN_MspInit+0x1c0>)
 80016f2:	f001 faf5 	bl	8002ce0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	203f      	movs	r0, #63	@ 0x3f
 80016fc:	f001 fa27 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001700:	203f      	movs	r0, #63	@ 0x3f
 8001702:	f001 fa40 	bl	8002b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2040      	movs	r0, #64	@ 0x40
 800170c:	f001 fa1f 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001710:	2040      	movs	r0, #64	@ 0x40
 8001712:	f001 fa38 	bl	8002b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2041      	movs	r0, #65	@ 0x41
 800171c:	f001 fa17 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001720:	2041      	movs	r0, #65	@ 0x41
 8001722:	f001 fa30 	bl	8002b86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2042      	movs	r0, #66	@ 0x42
 800172c:	f001 fa0f 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8001730:	2042      	movs	r0, #66	@ 0x42
 8001732:	f001 fa28 	bl	8002b86 <HAL_NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3730      	adds	r7, #48	@ 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40006400 	.word	0x40006400
 8001744:	200002b8 	.word	0x200002b8
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40006800 	.word	0x40006800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001768:	d10e      	bne.n	8001788 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <HAL_TIM_PWM_MspInit+0x64>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <HAL_TIM_PWM_MspInit+0x64>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_TIM_PWM_MspInit+0x64>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001786:	e012      	b.n	80017ae <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <HAL_TIM_PWM_MspInit+0x68>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10d      	bne.n	80017ae <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_TIM_PWM_MspInit+0x64>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_TIM_PWM_MspInit+0x64>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_TIM_PWM_MspInit+0x64>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40000400 	.word	0x40000400

080017c4 <HAL_TIM_Base_MspInit>:
//  /* USER CODE END TIM7_MspInit 1 */
//  }
//
//}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001844 <HAL_TIM_Base_MspInit+0x80>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d116      	bne.n	8001804 <HAL_TIM_Base_MspInit+0x40>
		//1. enable the clock for the TIM6 peripheral
		__HAL_RCC_TIM6_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_TIM_Base_MspInit+0x84>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <HAL_TIM_Base_MspInit+0x84>)
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_TIM_Base_MspInit+0x84>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]

		//2. Enable the IRQ of TIM6
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f2:	2036      	movs	r0, #54	@ 0x36
 80017f4:	f001 f9c7 	bl	8002b86 <HAL_NVIC_EnableIRQ>

		//3. setup the priority for TIM6_DAC_IRQn
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	210f      	movs	r1, #15
 80017fc:	2036      	movs	r0, #54	@ 0x36
 80017fe:	f001 f9a6 	bl	8002b4e <HAL_NVIC_SetPriority>
				//3. setup the priority for TIM6_DAC_IRQn
				HAL_NVIC_SetPriority(TIM7_IRQn ,15,0);

			}

}
 8001802:	e01a      	b.n	800183a <HAL_TIM_Base_MspInit+0x76>
	}else if(htim->Instance == TIM7){
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_TIM_Base_MspInit+0x88>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d115      	bne.n	800183a <HAL_TIM_Base_MspInit+0x76>
				__HAL_RCC_TIM7_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_TIM_Base_MspInit+0x84>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <HAL_TIM_Base_MspInit+0x84>)
 8001818:	f043 0320 	orr.w	r3, r3, #32
 800181c:	6413      	str	r3, [r2, #64]	@ 0x40
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_TIM_Base_MspInit+0x84>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
				HAL_NVIC_EnableIRQ(TIM7_IRQn );
 800182a:	2037      	movs	r0, #55	@ 0x37
 800182c:	f001 f9ab 	bl	8002b86 <HAL_NVIC_EnableIRQ>
				HAL_NVIC_SetPriority(TIM7_IRQn ,15,0);
 8001830:	2200      	movs	r2, #0
 8001832:	210f      	movs	r1, #15
 8001834:	2037      	movs	r0, #55	@ 0x37
 8001836:	f001 f98a 	bl	8002b4e <HAL_NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40001000 	.word	0x40001000
 8001848:	40023800 	.word	0x40023800
 800184c:	40001400 	.word	0x40001400

08001850 <HAL_TIM_MspPostInit>:

	}
}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001870:	d11e      	bne.n	80018b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4816      	ldr	r0, [pc, #88]	@ (8001904 <HAL_TIM_MspPostInit+0xb4>)
 80018aa:	f001 fa19 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018ae:	e022      	b.n	80018f6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <HAL_TIM_MspPostInit+0xb8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d11d      	bne.n	80018f6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <HAL_TIM_MspPostInit+0xb0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e6:	2302      	movs	r3, #2
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4804      	ldr	r0, [pc, #16]	@ (8001904 <HAL_TIM_MspPostInit+0xb4>)
 80018f2:	f001 f9f5 	bl	8002ce0 <HAL_GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	40000400 	.word	0x40000400

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a36      	ldr	r2, [pc, #216]	@ (8001a04 <HAL_UART_MspInit+0xf8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d135      	bne.n	800199a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a34      	ldr	r2, [pc, #208]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b32      	ldr	r3, [pc, #200]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a2d      	ldr	r2, [pc, #180]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001966:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001978:	2307      	movs	r3, #7
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4822      	ldr	r0, [pc, #136]	@ (8001a0c <HAL_UART_MspInit+0x100>)
 8001984:	f001 f9ac 	bl	8002ce0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2025      	movs	r0, #37	@ 0x25
 800198e:	f001 f8de 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001992:	2025      	movs	r0, #37	@ 0x25
 8001994:	f001 f8f7 	bl	8002b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001998:	e030      	b.n	80019fc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_UART_MspInit+0x104>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d12b      	bne.n	80019fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 80019ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_UART_MspInit+0xfc>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019dc:	230c      	movs	r3, #12
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ec:	2307      	movs	r3, #7
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <HAL_UART_MspInit+0x100>)
 80019f8:	f001 f972 	bl	8002ce0 <HAL_GPIO_Init>
}
 80019fc:	bf00      	nop
 80019fe:	3730      	adds	r7, #48	@ 0x30
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40011000 	.word	0x40011000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40004400 	.word	0x40004400

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <NMI_Handler+0x4>

08001a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f000 f935 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <CAN1_TX_IRQHandler+0x10>)
 8001a7a:	f000 fd85 	bl	8002588 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000238 	.word	0x20000238

08001a88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <CAN1_RX0_IRQHandler+0x10>)
 8001a8e:	f000 fd7b 	bl	8002588 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000238 	.word	0x20000238

08001a9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <CAN1_RX1_IRQHandler+0x10>)
 8001aa2:	f000 fd71 	bl	8002588 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000238 	.word	0x20000238

08001ab0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <CAN1_SCE_IRQHandler+0x10>)
 8001ab6:	f000 fd67 	bl	8002588 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000238 	.word	0x20000238

08001ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <USART1_IRQHandler+0x10>)
 8001aca:	f003 f83d 	bl	8004b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001a8 	.word	0x200001a8

08001ad8 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <TIM6_DAC_IRQHandler+0x10>)
 8001ade:	f002 fa6b 	bl	8003fb8 <HAL_TIM_IRQHandler>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000118 	.word	0x20000118

08001aec <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim7);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <TIM7_IRQHandler+0x10>)
 8001af2:	f002 fa61 	bl	8003fb8 <HAL_TIM_IRQHandler>

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000160 	.word	0x20000160

08001b00 <CAN2_TX_IRQHandler>:

void CAN2_TX_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  HAL_CAN_IRQHandler(&hcan2);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <CAN2_TX_IRQHandler+0x10>)
 8001b06:	f000 fd3f 	bl	8002588 <HAL_CAN_IRQHandler>

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000260 	.word	0x20000260

08001b14 <CAN2_RX0_IRQHandler>:

void CAN2_RX0_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  HAL_CAN_IRQHandler(&hcan2);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <CAN2_RX0_IRQHandler+0x10>)
 8001b1a:	f000 fd35 	bl	8002588 <HAL_CAN_IRQHandler>

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000260 	.word	0x20000260

08001b28 <CAN2_RX1_IRQHandler>:



void CAN2_RX1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

  HAL_CAN_IRQHandler(&hcan2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <CAN2_RX1_IRQHandler+0x10>)
 8001b2e:	f000 fd2b 	bl	8002588 <HAL_CAN_IRQHandler>

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000260 	.word	0x20000260

08001b3c <CAN2_SCE_IRQHandler>:


void CAN2_SCE_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0

  HAL_CAN_IRQHandler(&hcan2);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <CAN2_SCE_IRQHandler+0x10>)
 8001b42:	f000 fd21 	bl	8002588 <HAL_CAN_IRQHandler>

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000260 	.word	0x20000260

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f003 ff7a 	bl	8005a78 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20020000 	.word	0x20020000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	200002bc 	.word	0x200002bc
 8001bb8:	20000410 	.word	0x20000410

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	@ (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff ffd7 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f003 ff39 	bl	8005a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7fe fccd 	bl	80005b0 <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c24:	0800679c 	.word	0x0800679c
  ldr r2, =_sbss
 8001c28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c2c:	2000040c 	.word	0x2000040c

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 ff6b 	bl	8002b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fc6c 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 ff83 	bl	8002ba2 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 ff4b 	bl	8002b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	20000014 	.word	0x20000014
 8001cd4:	20000010 	.word	0x20000010

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000014 	.word	0x20000014
 8001cfc:	200002c0 	.word	0x200002c0

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200002c0 	.word	0x200002c0

08001d18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0ed      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fc2c 	bl	8001594 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff ffd8 	bl	8001d00 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff ffd4 	bl	8001d00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0c5      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0e5      	beq.n	8001d54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0202 	bic.w	r2, r2, #2
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff ffb2 	bl	8001d00 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff ffae 	bl	8001d00 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09f      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e5      	bne.n	8001da0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7e5b      	ldrb	r3, [r3, #25]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e9b      	ldrb	r3, [r3, #26]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0220 	bic.w	r2, r2, #32
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7edb      	ldrb	r3, [r3, #27]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0210 	bic.w	r2, r2, #16
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0210 	orr.w	r2, r2, #16
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7f1b      	ldrb	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7f5b      	ldrb	r3, [r3, #29]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	ea42 0103 	orr.w	r1, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d003      	beq.n	8001f36 <HAL_CAN_ConfigFilter+0x26>
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f040 80be 	bne.w	80020b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f36:	4b65      	ldr	r3, [pc, #404]	@ (80020cc <HAL_CAN_ConfigFilter+0x1bc>)
 8001f38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f50:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2201      	movs	r2, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d123      	bne.n	8001fe0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3248      	adds	r2, #72	@ 0x48
 8001fc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	3348      	adds	r3, #72	@ 0x48
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d122      	bne.n	800202e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002008:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3248      	adds	r2, #72	@ 0x48
 800200e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002022:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	3348      	adds	r3, #72	@ 0x48
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002048:	e007      	b.n	800205a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002074:	e007      	b.n	8002086 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a4:	f023 0201 	bic.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e006      	b.n	80020c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40006400 	.word	0x40006400

080020d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d12e      	bne.n	8002142 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff fe00 	bl	8001d00 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff fdfc 	bl	8001d00 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e012      	b.n	8002150 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d003      	beq.n	8002184 <HAL_CAN_AddTxMessage+0x2c>
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b02      	cmp	r3, #2
 8002180:	f040 80ad 	bne.w	80022de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8095 	beq.w	80022ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	0e1b      	lsrs	r3, r3, #24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021ae:	2201      	movs	r2, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	6809      	ldr	r1, [r1, #0]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3318      	adds	r3, #24
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e00f      	b.n	80021fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3318      	adds	r3, #24
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3318      	adds	r3, #24
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	7d1b      	ldrb	r3, [r3, #20]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d111      	bne.n	800223c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3318      	adds	r3, #24
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3318      	adds	r3, #24
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	440b      	add	r3, r1
 8002238:	3304      	adds	r3, #4
 800223a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3307      	adds	r3, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	061a      	lsls	r2, r3, #24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3306      	adds	r3, #6
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3305      	adds	r3, #5
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	4313      	orrs	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	3204      	adds	r2, #4
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	4610      	mov	r0, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	6811      	ldr	r1, [r2, #0]
 8002264:	ea43 0200 	orr.w	r2, r3, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	440b      	add	r3, r1
 800226e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002272:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3303      	adds	r3, #3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	061a      	lsls	r2, r3, #24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3302      	adds	r3, #2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3301      	adds	r3, #1
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	4313      	orrs	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	4610      	mov	r0, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6811      	ldr	r1, [r2, #0]
 800229a:	ea43 0200 	orr.w	r2, r3, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80022a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3318      	adds	r3, #24
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6811      	ldr	r1, [r2, #0]
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3318      	adds	r3, #24
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	440b      	add	r3, r1
 80022c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e00e      	b.n	80022ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e006      	b.n	80022ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3724      	adds	r7, #36	@ 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d003      	beq.n	800231c <HAL_CAN_GetRxMessage+0x24>
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b02      	cmp	r3, #2
 8002318:	f040 8103 	bne.w	8002522 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d116      	bne.n	800235e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0f7      	b.n	8002530 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e8      	b.n	8002530 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	331b      	adds	r3, #27
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0204 	and.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10c      	bne.n	8002396 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	331b      	adds	r3, #27
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0d5b      	lsrs	r3, r3, #21
 800238c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e00b      	b.n	80023ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	331b      	adds	r3, #27
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	331b      	adds	r3, #27
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0202 	and.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	331b      	adds	r3, #27
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2208      	movs	r2, #8
 80023e0:	611a      	str	r2, [r3, #16]
 80023e2:	e00b      	b.n	80023fc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	331b      	adds	r3, #27
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	331b      	adds	r3, #27
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	331b      	adds	r3, #27
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4413      	add	r3, r2
 8002436:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0a1a      	lsrs	r2, r3, #8
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4413      	add	r3, r2
 8002466:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0c1a      	lsrs	r2, r3, #16
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3302      	adds	r3, #2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e1a      	lsrs	r2, r3, #24
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	3303      	adds	r3, #3
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4413      	add	r3, r2
 800249a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3304      	adds	r3, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0a1a      	lsrs	r2, r3, #8
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3305      	adds	r3, #5
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0c1a      	lsrs	r2, r3, #16
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3306      	adds	r3, #6
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e1a      	lsrs	r2, r3, #24
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3307      	adds	r3, #7
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	e007      	b.n	800251e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e006      	b.n	8002530 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <HAL_CAN_ActivateNotification+0x1e>
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d109      	bne.n	800256e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6959      	ldr	r1, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e006      	b.n	800257c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
  }
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002590:	2300      	movs	r3, #0
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d07c      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fd34 	bl	8001058 <HAL_CAN_TxMailbox0CompleteCallback>
 80025f0:	e016      	b.n	8002620 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
 8002604:	e00c      	b.n	8002620 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
 8002618:	e002      	b.n	8002620 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f96b 	bl	80028f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d024      	beq.n	8002674 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002632:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fd1a 	bl	8001078 <HAL_CAN_TxMailbox1CompleteCallback>
 8002644:	e016      	b.n	8002674 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	e00c      	b.n	8002674 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	e002      	b.n	8002674 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f94b 	bl	800290a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d024      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002686:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fd00 	bl	8001098 <HAL_CAN_TxMailbox2CompleteCallback>
 8002698:	e016      	b.n	80026c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ac:	e00c      	b.n	80026c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c0:	e002      	b.n	80026c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f92b 	bl	800291e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2210      	movs	r2, #16
 80026ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2208      	movs	r2, #8
 8002706:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f912 	bl	8002932 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fcc6 	bl	80010b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f8ea 	bl	8002946 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fd10 	bl	80011b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f8d4 	bl	800295a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2208      	movs	r2, #8
 80027cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8cd 	bl	800296e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d07b      	beq.n	80028d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d072      	beq.n	80028ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002842:	2b00      	cmp	r3, #0
 8002844:	d043      	beq.n	80028ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800284c:	2b00      	cmp	r3, #0
 800284e:	d03e      	beq.n	80028ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002856:	2b60      	cmp	r3, #96	@ 0x60
 8002858:	d02b      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x32a>
 800285a:	2b60      	cmp	r3, #96	@ 0x60
 800285c:	d82e      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 800285e:	2b50      	cmp	r3, #80	@ 0x50
 8002860:	d022      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x320>
 8002862:	2b50      	cmp	r3, #80	@ 0x50
 8002864:	d82a      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 8002866:	2b40      	cmp	r3, #64	@ 0x40
 8002868:	d019      	beq.n	800289e <HAL_CAN_IRQHandler+0x316>
 800286a:	2b40      	cmp	r3, #64	@ 0x40
 800286c:	d826      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 800286e:	2b30      	cmp	r3, #48	@ 0x30
 8002870:	d010      	beq.n	8002894 <HAL_CAN_IRQHandler+0x30c>
 8002872:	2b30      	cmp	r3, #48	@ 0x30
 8002874:	d822      	bhi.n	80028bc <HAL_CAN_IRQHandler+0x334>
 8002876:	2b10      	cmp	r3, #16
 8002878:	d002      	beq.n	8002880 <HAL_CAN_IRQHandler+0x2f8>
 800287a:	2b20      	cmp	r3, #32
 800287c:	d005      	beq.n	800288a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800287e:	e01d      	b.n	80028bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	f043 0308 	orr.w	r3, r3, #8
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002888:	e019      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002892:	e014      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	f043 0320 	orr.w	r3, r3, #32
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800289c:	e00f      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028a6:	e00a      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028b0:	e005      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ba:	e000      	b.n	80028be <HAL_CAN_IRQHandler+0x336>
            break;
 80028bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80028cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2204      	movs	r2, #4
 80028d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f84a 	bl	8002982 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	@ 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4907      	ldr	r1, [pc, #28]	@ (8002a34 <__NVIC_EnableIRQ+0x38>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db0a      	blt.n	8002a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	490c      	ldr	r1, [pc, #48]	@ (8002a84 <__NVIC_SetPriority+0x4c>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a60:	e00a      	b.n	8002a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4908      	ldr	r1, [pc, #32]	@ (8002a88 <__NVIC_SetPriority+0x50>)
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	761a      	strb	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000e100 	.word	0xe000e100
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	@ 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f1c3 0307 	rsb	r3, r3, #7
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf28      	it	cs
 8002aaa:	2304      	movcs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d902      	bls.n	8002abc <NVIC_EncodePriority+0x30>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	e000      	b.n	8002abe <NVIC_EncodePriority+0x32>
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	4313      	orrs	r3, r2
         );
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	@ 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b04:	d301      	bcc.n	8002b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00f      	b.n	8002b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b34 <SysTick_Config+0x40>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b12:	210f      	movs	r1, #15
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f7ff ff8e 	bl	8002a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <SysTick_Config+0x40>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b22:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <SysTick_Config+0x40>)
 8002b24:	2207      	movs	r2, #7
 8002b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff29 	bl	8002998 <__NVIC_SetPriorityGrouping>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b60:	f7ff ff3e 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7ff ff8e 	bl	8002a8c <NVIC_EncodePriority>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff5d 	bl	8002a38 <__NVIC_SetPriority>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff31 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffa2 	bl	8002af4 <SysTick_Config>
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff f89a 	bl	8001d00 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d008      	beq.n	8002bec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2280      	movs	r2, #128	@ 0x80
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e052      	b.n	8002c92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0216 	bic.w	r2, r2, #22
 8002bfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d103      	bne.n	8002c1c <HAL_DMA_Abort+0x62>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0208 	bic.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3c:	e013      	b.n	8002c66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c3e:	f7ff f85f 	bl	8001d00 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d90c      	bls.n	8002c66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2203      	movs	r2, #3
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e015      	b.n	8002c92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e4      	bne.n	8002c3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c78:	223f      	movs	r2, #63	@ 0x3f
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	@ 0x80
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e00c      	b.n	8002cd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2205      	movs	r2, #5
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e165      	b.n	8002fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f040 8154 	bne.w	8002fc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d130      	bne.n	8002d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 0201 	and.w	r2, r3, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d017      	beq.n	8002dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d123      	bne.n	8002e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	08da      	lsrs	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80ae 	beq.w	8002fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe0 <HAL_GPIO_Init+0x300>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe0 <HAL_GPIO_Init+0x300>)
 8002e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e76:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe0 <HAL_GPIO_Init+0x300>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e82:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_GPIO_Init+0x304>)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe8 <HAL_GPIO_Init+0x308>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d025      	beq.n	8002efa <HAL_GPIO_Init+0x21a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	@ (8002fec <HAL_GPIO_Init+0x30c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <HAL_GPIO_Init+0x216>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff0 <HAL_GPIO_Init+0x310>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d019      	beq.n	8002ef2 <HAL_GPIO_Init+0x212>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff4 <HAL_GPIO_Init+0x314>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_GPIO_Init+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff8 <HAL_GPIO_Init+0x318>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <HAL_GPIO_Init+0x20a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ffc <HAL_GPIO_Init+0x31c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <HAL_GPIO_Init+0x206>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_GPIO_Init+0x320>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_GPIO_Init+0x202>
 8002ede:	2306      	movs	r3, #6
 8002ee0:	e00c      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e00a      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002eea:	2304      	movs	r3, #4
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	@ (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a31      	ldr	r2, [pc, #196]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a26      	ldr	r2, [pc, #152]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6e:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a11      	ldr	r2, [pc, #68]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f ae96 	bls.w	8002cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021400 	.word	0x40021400
 8003000:	40021800 	.word	0x40021800
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
 8003014:	4613      	mov	r3, r2
 8003016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003024:	e003      	b.n	800302e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0cc      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b68      	ldr	r3, [pc, #416]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d90c      	bls.n	8003078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b65      	ldr	r3, [pc, #404]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a52      	ldr	r2, [pc, #328]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d044      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b3f      	ldr	r3, [pc, #252]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3b      	ldr	r3, [pc, #236]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e067      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b37      	ldr	r3, [pc, #220]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4934      	ldr	r1, [pc, #208]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fe fde8 	bl	8001d00 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe fde4 	bl	8001d00 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e04f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2b      	ldr	r3, [pc, #172]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d20c      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b22      	ldr	r3, [pc, #136]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ae:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f855 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd48 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08006740 	.word	0x08006740
 8003200:	2000000c 	.word	0x2000000c
 8003204:	20000010 	.word	0x20000010

08003208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_RCC_GetHCLKFreq+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000000c 	.word	0x2000000c

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003224:	f7ff fff0 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0a9b      	lsrs	r3, r3, #10
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	08006750 	.word	0x08006750

08003248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800324c:	f7ff ffdc 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0b5b      	lsrs	r3, r3, #13
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	@ (800326c <HAL_RCC_GetPCLK2Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	08006750 	.word	0x08006750

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b0ae      	sub	sp, #184	@ 0xb8
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003296:	4bcb      	ldr	r3, [pc, #812]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	f200 8204 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x43c>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	080036ad 	.word	0x080036ad
 80032b4:	080036ad 	.word	0x080036ad
 80032b8:	080036ad 	.word	0x080036ad
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	080036ad 	.word	0x080036ad
 80032c4:	080036ad 	.word	0x080036ad
 80032c8:	080036ad 	.word	0x080036ad
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	080036ad 	.word	0x080036ad
 80032d4:	080036ad 	.word	0x080036ad
 80032d8:	080036ad 	.word	0x080036ad
 80032dc:	080034e1 	.word	0x080034e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4bb9      	ldr	r3, [pc, #740]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80032e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80032e6:	e1e5      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e8:	4bb7      	ldr	r3, [pc, #732]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ee:	e1e1      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f0:	4bb4      	ldr	r3, [pc, #720]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fc:	4bb1      	ldr	r3, [pc, #708]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d071      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4bae      	ldr	r3, [pc, #696]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003314:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800332a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4621      	mov	r1, r4
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	6439      	str	r1, [r7, #64]	@ 0x40
 800334c:	4629      	mov	r1, r5
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	647b      	str	r3, [r7, #68]	@ 0x44
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003360:	4649      	mov	r1, r9
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336a:	4641      	mov	r1, r8
 800336c:	018a      	lsls	r2, r1, #6
 800336e:	4641      	mov	r1, r8
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003374:	4649      	mov	r1, r9
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003388:	4649      	mov	r1, r9
 800338a:	00cb      	lsls	r3, r1, #3
 800338c:	4641      	mov	r1, r8
 800338e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003392:	4641      	mov	r1, r8
 8003394:	00ca      	lsls	r2, r1, #3
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	4603      	mov	r3, r0
 800339c:	4622      	mov	r2, r4
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a2:	462b      	mov	r3, r5
 80033a4:	460a      	mov	r2, r1
 80033a6:	eb42 0303 	adc.w	r3, r2, r3
 80033aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033b8:	4629      	mov	r1, r5
 80033ba:	028b      	lsls	r3, r1, #10
 80033bc:	4621      	mov	r1, r4
 80033be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c2:	4621      	mov	r1, r4
 80033c4:	028a      	lsls	r2, r1, #10
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80033dc:	f7fc ff70 	bl	80002c0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ea:	e067      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b75      	ldr	r3, [pc, #468]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80033fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003406:	2300      	movs	r3, #0
 8003408:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800340a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800340e:	4622      	mov	r2, r4
 8003410:	462b      	mov	r3, r5
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	0159      	lsls	r1, r3, #5
 800341c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003420:	0150      	lsls	r0, r2, #5
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4621      	mov	r1, r4
 8003428:	1a51      	subs	r1, r2, r1
 800342a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800342c:	4629      	mov	r1, r5
 800342e:	eb63 0301 	sbc.w	r3, r3, r1
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003440:	4649      	mov	r1, r9
 8003442:	018b      	lsls	r3, r1, #6
 8003444:	4641      	mov	r1, r8
 8003446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344a:	4641      	mov	r1, r8
 800344c:	018a      	lsls	r2, r1, #6
 800344e:	4641      	mov	r1, r8
 8003450:	ebb2 0a01 	subs.w	sl, r2, r1
 8003454:	4649      	mov	r1, r9
 8003456:	eb63 0b01 	sbc.w	fp, r3, r1
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003466:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800346a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800346e:	4692      	mov	sl, r2
 8003470:	469b      	mov	fp, r3
 8003472:	4623      	mov	r3, r4
 8003474:	eb1a 0303 	adds.w	r3, sl, r3
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	462b      	mov	r3, r5
 800347c:	eb4b 0303 	adc.w	r3, fp, r3
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800348e:	4629      	mov	r1, r5
 8003490:	028b      	lsls	r3, r1, #10
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003498:	4621      	mov	r1, r4
 800349a:	028a      	lsls	r2, r1, #10
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034a4:	2200      	movs	r2, #0
 80034a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80034aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034ae:	f7fc ff07 	bl	80002c0 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4613      	mov	r3, r2
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034bc:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	3301      	adds	r3, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80034ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034de:	e0e9      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e0:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ec:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d069      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f8:	4b32      	ldr	r3, [pc, #200]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	2200      	movs	r2, #0
 8003500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350a:	663b      	str	r3, [r7, #96]	@ 0x60
 800350c:	2300      	movs	r3, #0
 800350e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003510:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003514:	4622      	mov	r2, r4
 8003516:	462b      	mov	r3, r5
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	0159      	lsls	r1, r3, #5
 8003522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003526:	0150      	lsls	r0, r2, #5
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4621      	mov	r1, r4
 800352e:	1a51      	subs	r1, r2, r1
 8003530:	61b9      	str	r1, [r7, #24]
 8003532:	4629      	mov	r1, r5
 8003534:	eb63 0301 	sbc.w	r3, r3, r1
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003546:	4659      	mov	r1, fp
 8003548:	018b      	lsls	r3, r1, #6
 800354a:	4651      	mov	r1, sl
 800354c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003550:	4651      	mov	r1, sl
 8003552:	018a      	lsls	r2, r1, #6
 8003554:	4651      	mov	r1, sl
 8003556:	ebb2 0801 	subs.w	r8, r2, r1
 800355a:	4659      	mov	r1, fp
 800355c:	eb63 0901 	sbc.w	r9, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003570:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003574:	4690      	mov	r8, r2
 8003576:	4699      	mov	r9, r3
 8003578:	4623      	mov	r3, r4
 800357a:	eb18 0303 	adds.w	r3, r8, r3
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	462b      	mov	r3, r5
 8003582:	eb49 0303 	adc.w	r3, r9, r3
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003594:	4629      	mov	r1, r5
 8003596:	028b      	lsls	r3, r1, #10
 8003598:	4621      	mov	r1, r4
 800359a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800359e:	4621      	mov	r1, r4
 80035a0:	028a      	lsls	r2, r1, #10
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035aa:	2200      	movs	r2, #0
 80035ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035b4:	f7fc fe84 	bl	80002c0 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035c2:	e063      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x41c>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035cc:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x454>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	2200      	movs	r2, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	4611      	mov	r1, r2
 80035d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80035de:	2300      	movs	r3, #0
 80035e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80035e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80035e6:	4642      	mov	r2, r8
 80035e8:	464b      	mov	r3, r9
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4641      	mov	r1, r8
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	4649      	mov	r1, r9
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003618:	4659      	mov	r1, fp
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003622:	4651      	mov	r1, sl
 8003624:	018a      	lsls	r2, r1, #6
 8003626:	4651      	mov	r1, sl
 8003628:	1a54      	subs	r4, r2, r1
 800362a:	4659      	mov	r1, fp
 800362c:	eb63 0501 	sbc.w	r5, r3, r1
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	00eb      	lsls	r3, r5, #3
 800363a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800363e:	00e2      	lsls	r2, r4, #3
 8003640:	4614      	mov	r4, r2
 8003642:	461d      	mov	r5, r3
 8003644:	4643      	mov	r3, r8
 8003646:	18e3      	adds	r3, r4, r3
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	464b      	mov	r3, r9
 800364c:	eb45 0303 	adc.w	r3, r5, r3
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800365e:	4629      	mov	r1, r5
 8003660:	028b      	lsls	r3, r1, #10
 8003662:	4621      	mov	r1, r4
 8003664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003668:	4621      	mov	r1, r4
 800366a:	028a      	lsls	r2, r1, #10
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003674:	2200      	movs	r2, #0
 8003676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003678:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800367a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800367e:	f7fc fe1f 	bl	80002c0 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4613      	mov	r3, r2
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800368c:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x454>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0f1b      	lsrs	r3, r3, #28
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800369a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800369e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036aa:	e003      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80036ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	37b8      	adds	r7, #184	@ 0xb8
 80036bc:	46bd      	mov	sp, r7
 80036be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400

080036cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e28d      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8083 	beq.w	80037f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036ec:	4b94      	ldr	r3, [pc, #592]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d019      	beq.n	800372c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f8:	4b91      	ldr	r3, [pc, #580]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003700:	2b08      	cmp	r3, #8
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003704:	4b8e      	ldr	r3, [pc, #568]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003710:	d00c      	beq.n	800372c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b8b      	ldr	r3, [pc, #556]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d112      	bne.n	8003744 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b88      	ldr	r3, [pc, #544]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b84      	ldr	r3, [pc, #528]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x124>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d157      	bne.n	80037f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e25a      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x90>
 800374e:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7b      	ldr	r2, [pc, #492]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xcc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0xb4>
 8003766:	4b76      	ldr	r3, [pc, #472]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a75      	ldr	r2, [pc, #468]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a72      	ldr	r2, [pc, #456]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xcc>
 8003780:	4b6f      	ldr	r3, [pc, #444]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6e      	ldr	r2, [pc, #440]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6b      	ldr	r2, [pc, #428]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe faae 	bl	8001d00 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe faaa 	bl	8001d00 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e21f      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b61      	ldr	r3, [pc, #388]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xdc>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe fa9a 	bl	8001d00 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe fa96 	bl	8001d00 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	@ 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e20b      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b57      	ldr	r3, [pc, #348]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x104>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d06f      	beq.n	80038de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037fe:	4b50      	ldr	r3, [pc, #320]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800380a:	4b4d      	ldr	r3, [pc, #308]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003812:	2b08      	cmp	r3, #8
 8003814:	d105      	bne.n	8003822 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003816:	4b4a      	ldr	r3, [pc, #296]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003822:	4b47      	ldr	r3, [pc, #284]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d11c      	bne.n	8003868 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b44      	ldr	r3, [pc, #272]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x186>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e1d3      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b3b      	ldr	r3, [pc, #236]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4937      	ldr	r1, [pc, #220]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	e03a      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003870:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <HAL_RCC_OscConfig+0x278>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fa43 	bl	8001d00 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fa3f 	bl	8001d00 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1b4      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4925      	ldr	r1, [pc, #148]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b24      	ldr	r3, [pc, #144]	@ (8003944 <HAL_RCC_OscConfig+0x278>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe fa22 	bl	8001d00 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fe fa1e 	bl	8001d00 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e193      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d036      	beq.n	8003958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fa02 	bl	8001d00 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe f9fe 	bl	8001d00 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e173      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_OscConfig+0x274>)
 8003914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x234>
 800391e:	e01b      	b.n	8003958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_OscConfig+0x27c>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe f9eb 	bl	8001d00 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	e00e      	b.n	800394c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe f9e7 	bl	8001d00 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d907      	bls.n	800394c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e15c      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
 8003940:	40023800 	.word	0x40023800
 8003944:	42470000 	.word	0x42470000
 8003948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ea      	bne.n	800392e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8097 	beq.w	8003a94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b83      	ldr	r3, [pc, #524]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
 8003986:	4b7c      	ldr	r3, [pc, #496]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b79      	ldr	r3, [pc, #484]	@ (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d118      	bne.n	80039d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a2:	4b76      	ldr	r3, [pc, #472]	@ (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a75      	ldr	r2, [pc, #468]	@ (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ae:	f7fe f9a7 	bl	8001d00 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7fe f9a3 	bl	8001d00 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e118      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b7c <HAL_RCC_OscConfig+0x4b0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x31e>
 80039dc:	4b66      	ldr	r3, [pc, #408]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e0:	4a65      	ldr	r2, [pc, #404]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e8:	e01c      	b.n	8003a24 <HAL_RCC_OscConfig+0x358>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x340>
 80039f2:	4b61      	ldr	r3, [pc, #388]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	4a60      	ldr	r2, [pc, #384]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	4a5d      	ldr	r2, [pc, #372]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0x358>
 8003a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	4a59      	ldr	r2, [pc, #356]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a18:	4b57      	ldr	r3, [pc, #348]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1c:	4a56      	ldr	r2, [pc, #344]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	f023 0304 	bic.w	r3, r3, #4
 8003a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f968 	bl	8001d00 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fe f964 	bl	8001d00 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0d7      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0ee      	beq.n	8003a34 <HAL_RCC_OscConfig+0x368>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe f952 	bl	8001d00 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe f94e 	bl	8001d00 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0c1      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	4b40      	ldr	r3, [pc, #256]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ee      	bne.n	8003a60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a88:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80ad 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9e:	4b36      	ldr	r3, [pc, #216]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d060      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d145      	bne.n	8003b3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b33      	ldr	r3, [pc, #204]	@ (8003b80 <HAL_RCC_OscConfig+0x4b4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f922 	bl	8001d00 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe f91e 	bl	8001d00 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e093      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b29      	ldr	r3, [pc, #164]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	491b      	ldr	r1, [pc, #108]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b10:	4b1b      	ldr	r3, [pc, #108]	@ (8003b80 <HAL_RCC_OscConfig+0x4b4>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fe f8f3 	bl	8001d00 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe f8ef 	bl	8001d00 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e064      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b30:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x452>
 8003b3c:	e05c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <HAL_RCC_OscConfig+0x4b4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe f8dc 	bl	8001d00 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fe f8d8 	bl	8001d00 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e04d      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x480>
 8003b6a:	e045      	b.n	8003bf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e040      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b84:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <HAL_RCC_OscConfig+0x538>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d030      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d129      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d122      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d119      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fdc8 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fb90 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e04e      	b.n	8003d5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a23      	ldr	r2, [pc, #140]	@ (8003d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cea:	d01d      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	@ (8003d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a19      	ldr	r2, [pc, #100]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x80>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	@ (8003d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d111      	bne.n	8003d4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d010      	beq.n	8003d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	e007      	b.n	8003d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800
 8003d78:	40000c00 	.word	0x40000c00
 8003d7c:	40010400 	.word	0x40010400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40001800 	.word	0x40001800

08003d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e041      	b.n	8003e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fcd2 	bl	8001758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fad0 	bl	800436c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_TIM_PWM_Start+0x24>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e022      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d109      	bne.n	8003e66 <HAL_TIM_PWM_Start+0x3e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	e015      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d109      	bne.n	8003e80 <HAL_TIM_PWM_Start+0x58>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	e008      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07c      	b.n	8003f94 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x82>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea8:	e013      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0x92>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eb8:	e00b      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec8:	e003      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fca2 	bl	8004824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <HAL_TIM_PWM_Start+0x174>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_PWM_Start+0xcc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa0 <HAL_TIM_PWM_Start+0x178>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0xd0>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_PWM_Start+0xd2>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a22      	ldr	r2, [pc, #136]	@ (8003f9c <HAL_TIM_PWM_Start+0x174>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f20:	d01d      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa4 <HAL_TIM_PWM_Start+0x17c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa8 <HAL_TIM_PWM_Start+0x180>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fac <HAL_TIM_PWM_Start+0x184>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <HAL_TIM_PWM_Start+0x178>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <HAL_TIM_PWM_Start+0x188>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x136>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a16      	ldr	r2, [pc, #88]	@ (8003fb4 <HAL_TIM_PWM_Start+0x18c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d111      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d010      	beq.n	8003f92 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	e007      	b.n	8003f92 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40001800 	.word	0x40001800

08003fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0202 	mvn.w	r2, #2
 8003fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f994 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f986 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f997 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0204 	mvn.w	r2, #4
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f96e 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f960 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f971 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0208 	mvn.w	r2, #8
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f948 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f93a 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f94b 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d020      	beq.n	8004100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0210 	mvn.w	r2, #16
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2208      	movs	r2, #8
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f922 	bl	8004330 <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f914 	bl	800431c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f925 	bl	8004344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00c      	beq.n	8004124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0201 	mvn.w	r2, #1
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc fb6c 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fc1a 	bl	800497c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8f6 	bl	8004358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00c      	beq.n	8004190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0220 	mvn.w	r2, #32
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fbec 	bl	8004968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ae      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	f200 809f 	bhi.w	8004304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004305 	.word	0x08004305
 80041d4:	08004305 	.word	0x08004305
 80041d8:	08004305 	.word	0x08004305
 80041dc:	08004241 	.word	0x08004241
 80041e0:	08004305 	.word	0x08004305
 80041e4:	08004305 	.word	0x08004305
 80041e8:	08004305 	.word	0x08004305
 80041ec:	08004283 	.word	0x08004283
 80041f0:	08004305 	.word	0x08004305
 80041f4:	08004305 	.word	0x08004305
 80041f8:	08004305 	.word	0x08004305
 80041fc:	080042c3 	.word	0x080042c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f95c 	bl	80044c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6999      	ldr	r1, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
      break;
 800423e:	e064      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f9ac 	bl	80045a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
      break;
 8004280:	e043      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fa01 	bl	8004690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0208 	orr.w	r2, r2, #8
 800429c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0204 	bic.w	r2, r2, #4
 80042ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69d9      	ldr	r1, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	61da      	str	r2, [r3, #28]
      break;
 80042c0:	e023      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fa55 	bl	8004778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	021a      	lsls	r2, r3, #8
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	61da      	str	r2, [r3, #28]
      break;
 8004302:	e002      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
      break;
 8004308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a46      	ldr	r2, [pc, #280]	@ (8004498 <TIM_Base_SetConfig+0x12c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438a:	d00f      	beq.n	80043ac <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a43      	ldr	r2, [pc, #268]	@ (800449c <TIM_Base_SetConfig+0x130>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00b      	beq.n	80043ac <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a42      	ldr	r2, [pc, #264]	@ (80044a0 <TIM_Base_SetConfig+0x134>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a41      	ldr	r2, [pc, #260]	@ (80044a4 <TIM_Base_SetConfig+0x138>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a40      	ldr	r2, [pc, #256]	@ (80044a8 <TIM_Base_SetConfig+0x13c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a35      	ldr	r2, [pc, #212]	@ (8004498 <TIM_Base_SetConfig+0x12c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02b      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043cc:	d027      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a32      	ldr	r2, [pc, #200]	@ (800449c <TIM_Base_SetConfig+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d023      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a31      	ldr	r2, [pc, #196]	@ (80044a0 <TIM_Base_SetConfig+0x134>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01f      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <TIM_Base_SetConfig+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01b      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	@ (80044a8 <TIM_Base_SetConfig+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d017      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2e      	ldr	r2, [pc, #184]	@ (80044ac <TIM_Base_SetConfig+0x140>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2d      	ldr	r2, [pc, #180]	@ (80044b0 <TIM_Base_SetConfig+0x144>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <TIM_Base_SetConfig+0x148>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <TIM_Base_SetConfig+0x14c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2a      	ldr	r2, [pc, #168]	@ (80044bc <TIM_Base_SetConfig+0x150>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <TIM_Base_SetConfig+0x154>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d108      	bne.n	8004430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a10      	ldr	r2, [pc, #64]	@ (8004498 <TIM_Base_SetConfig+0x12c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0xf8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <TIM_Base_SetConfig+0x13c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f023 0201 	bic.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	611a      	str	r2, [r3, #16]
  }
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800
 80044b8:	40001800 	.word	0x40001800
 80044bc:	40001c00 	.word	0x40001c00
 80044c0:	40002000 	.word	0x40002000

080044c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f023 0201 	bic.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f023 0302 	bic.w	r3, r3, #2
 800450c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a20      	ldr	r2, [pc, #128]	@ (800459c <TIM_OC1_SetConfig+0xd8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC1_SetConfig+0x64>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <TIM_OC1_SetConfig+0xdc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10c      	bne.n	8004542 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0308 	bic.w	r3, r3, #8
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f023 0304 	bic.w	r3, r3, #4
 8004540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a15      	ldr	r2, [pc, #84]	@ (800459c <TIM_OC1_SetConfig+0xd8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC1_SetConfig+0x8e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a14      	ldr	r2, [pc, #80]	@ (80045a0 <TIM_OC1_SetConfig+0xdc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d111      	bne.n	8004576 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40010000 	.word	0x40010000
 80045a0:	40010400 	.word	0x40010400

080045a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 0210 	bic.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0320 	bic.w	r3, r3, #32
 80045ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a22      	ldr	r2, [pc, #136]	@ (8004688 <TIM_OC2_SetConfig+0xe4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_OC2_SetConfig+0x68>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a21      	ldr	r2, [pc, #132]	@ (800468c <TIM_OC2_SetConfig+0xe8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10d      	bne.n	8004628 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004626:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <TIM_OC2_SetConfig+0xe4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC2_SetConfig+0x94>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a16      	ldr	r2, [pc, #88]	@ (800468c <TIM_OC2_SetConfig+0xe8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d113      	bne.n	8004660 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800463e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40010400 	.word	0x40010400

08004690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <TIM_OC3_SetConfig+0xe0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC3_SetConfig+0x66>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <TIM_OC3_SetConfig+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10d      	bne.n	8004712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a16      	ldr	r2, [pc, #88]	@ (8004770 <TIM_OC3_SetConfig+0xe0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_OC3_SetConfig+0x92>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <TIM_OC3_SetConfig+0xe4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d113      	bne.n	800474a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	621a      	str	r2, [r3, #32]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40010000 	.word	0x40010000
 8004774:	40010400 	.word	0x40010400

08004778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a12      	ldr	r2, [pc, #72]	@ (800481c <TIM_OC4_SetConfig+0xa4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_OC4_SetConfig+0x68>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a11      	ldr	r2, [pc, #68]	@ (8004820 <TIM_OC4_SetConfig+0xa8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d109      	bne.n	80047f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000
 8004820:	40010400 	.word	0x40010400

08004824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2201      	movs	r2, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	43db      	mvns	r3, r3
 8004846:	401a      	ands	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004884:	2302      	movs	r3, #2
 8004886:	e05a      	b.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a21      	ldr	r2, [pc, #132]	@ (800494c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d022      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d4:	d01d      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1d      	ldr	r2, [pc, #116]	@ (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a15      	ldr	r2, [pc, #84]	@ (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10c      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40001800 	.word	0x40001800

08004968 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e042      	b.n	8004a28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc ffa8 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	@ 0x24
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fd69 	bl	80054ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d175      	bne.n	8004b3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_UART_Transmit+0x2c>
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e06e      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2221      	movs	r2, #33	@ 0x21
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6e:	f7fd f947 	bl	8001d00 <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a88:	d108      	bne.n	8004a9c <HAL_UART_Transmit+0x6c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d104      	bne.n	8004a9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e003      	b.n	8004aa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004aa4:	e02e      	b.n	8004b04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	@ 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fb05 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e03a      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004adc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	e007      	b.n	8004af6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	3301      	adds	r3, #1
 8004af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1cb      	bne.n	8004aa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2140      	movs	r1, #64	@ 0x40
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fad1 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e006      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_UART_IRQHandler+0x66>
 8004b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fbc2 	bl	8005330 <UART_Receive_IT>
      return;
 8004bac:	e25b      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80de 	beq.w	8004d74 <HAL_UART_IRQHandler+0x22c>
 8004bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80d1 	beq.w	8004d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xae>
 8004bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_UART_IRQHandler+0xd2>
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	f043 0202 	orr.w	r2, r3, #2
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0xf6>
 8004c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d011      	beq.n	8004c6e <HAL_UART_IRQHandler+0x126>
 8004c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	f043 0208 	orr.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 81f2 	beq.w	800505c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_UART_IRQHandler+0x14e>
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fb4d 	bl	8005330 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x17a>
 8004cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04f      	beq.n	8004d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa55 	bl	8005172 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d141      	bne.n	8004d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1d9      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f28 <HAL_UART_IRQHandler+0x3e0>)
 8004d30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd ffaf 	bl	8002c9a <HAL_DMA_Abort_IT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e00e      	b.n	8004d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f99e 	bl	8005094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	e00a      	b.n	8004d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f99a 	bl	8005094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e006      	b.n	8004d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f996 	bl	8005094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d6e:	e175      	b.n	800505c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	bf00      	nop
    return;
 8004d72:	e173      	b.n	800505c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 814f 	bne.w	800501c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8148 	beq.w	800501c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8141 	beq.w	800501c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b40      	cmp	r3, #64	@ 0x40
 8004dbc:	f040 80b6 	bne.w	8004f2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8145 	beq.w	8005060 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f080 813e 	bcs.w	8005060 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df6:	f000 8088 	beq.w	8004f0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1d9      	bne.n	8004dfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3314      	adds	r3, #20
 8004e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e1      	bne.n	8004e46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004eac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e3      	bne.n	8004e82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004eec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004eee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e3      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fd fe58 	bl	8002bba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f8c1 	bl	80050a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f26:	e09b      	b.n	8005060 <HAL_UART_IRQHandler+0x518>
 8004f28:	08005239 	.word	0x08005239
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 808e 	beq.w	8005064 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8089 	beq.w	8005064 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e3      	bne.n	8004f52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e3      	bne.n	8004f8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ff4:	61fa      	str	r2, [r7, #28]
 8004ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	617b      	str	r3, [r7, #20]
   return(result);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e3      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800500e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f847 	bl	80050a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800501a:	e023      	b.n	8005064 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d009      	beq.n	800503c <HAL_UART_IRQHandler+0x4f4>
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f913 	bl	8005260 <UART_Transmit_IT>
    return;
 800503a:	e014      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <HAL_UART_IRQHandler+0x51e>
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800504c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f953 	bl	8005300 <UART_EndTransmit_IT>
    return;
 800505a:	e004      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
    return;
 800505c:	bf00      	nop
 800505e:	e002      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
      return;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <HAL_UART_IRQHandler+0x51e>
      return;
 8005064:	bf00      	nop
  }
}
 8005066:	37e8      	adds	r7, #232	@ 0xe8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d0:	e03b      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d037      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050da:	f7fc fe11 	bl	8001d00 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03a      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d023      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b80      	cmp	r3, #128	@ 0x80
 8005106:	d020      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d01d      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b08      	cmp	r3, #8
 800511a:	d116      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f81d 	bl	8005172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2208      	movs	r2, #8
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00f      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	429a      	cmp	r2, r3
 8005166:	d0b4      	beq.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005172:	b480      	push	{r7}
 8005174:	b095      	sub	sp, #84	@ 0x54
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	330c      	adds	r3, #12
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800518a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800519a:	643a      	str	r2, [r7, #64]	@ 0x40
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d119      	bne.n	800521e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0310 	bic.w	r3, r3, #16
 8005200:	647b      	str	r3, [r7, #68]	@ 0x44
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800520a:	61ba      	str	r2, [r7, #24]
 800520c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6979      	ldr	r1, [r7, #20]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	613b      	str	r3, [r7, #16]
   return(result);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800522c:	bf00      	nop
 800522e:	3754      	adds	r7, #84	@ 0x54
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff ff1e 	bl	8005094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b21      	cmp	r3, #33	@ 0x21
 8005272:	d13e      	bne.n	80052f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527c:	d114      	bne.n	80052a8 <UART_Transmit_IT+0x48>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d110      	bne.n	80052a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	1c9a      	adds	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]
 80052a6:	e008      	b.n	80052ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6211      	str	r1, [r2, #32]
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4619      	mov	r1, r3
 80052c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10f      	bne.n	80052ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e000      	b.n	80052f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052f2:	2302      	movs	r3, #2
  }
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005316:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fea3 	bl	800506c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08c      	sub	sp, #48	@ 0x30
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b22      	cmp	r3, #34	@ 0x22
 8005342:	f040 80ae 	bne.w	80054a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534e:	d117      	bne.n	8005380 <UART_Receive_IT+0x50>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d113      	bne.n	8005380 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	b29a      	uxth	r2, r3
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	629a      	str	r2, [r3, #40]	@ 0x28
 800537e:	e026      	b.n	80053ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005392:	d007      	beq.n	80053a4 <UART_Receive_IT+0x74>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <UART_Receive_IT+0x82>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	e008      	b.n	80053c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4619      	mov	r1, r3
 80053dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d15d      	bne.n	800549e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0220 	bic.w	r2, r2, #32
 80053f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005400:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	2b01      	cmp	r3, #1
 8005426:	d135      	bne.n	8005494 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	613b      	str	r3, [r7, #16]
   return(result);
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f023 0310 	bic.w	r3, r3, #16
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544e:	623a      	str	r2, [r7, #32]
 8005450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	61bb      	str	r3, [r7, #24]
   return(result);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e5      	bne.n	800542e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d10a      	bne.n	8005486 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fe0b 	bl	80050a8 <HAL_UARTEx_RxEventCallback>
 8005492:	e002      	b.n	800549a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fdf3 	bl	8005080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e002      	b.n	80054a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3730      	adds	r7, #48	@ 0x30
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b0c0      	sub	sp, #256	@ 0x100
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c8:	68d9      	ldr	r1, [r3, #12]
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	ea40 0301 	orr.w	r3, r0, r1
 80054d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005504:	f021 010c 	bic.w	r1, r1, #12
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005512:	430b      	orrs	r3, r1
 8005514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	6999      	ldr	r1, [r3, #24]
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	ea40 0301 	orr.w	r3, r0, r1
 8005532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b8f      	ldr	r3, [pc, #572]	@ (8005778 <UART_SetConfig+0x2cc>)
 800553c:	429a      	cmp	r2, r3
 800553e:	d005      	beq.n	800554c <UART_SetConfig+0xa0>
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8d      	ldr	r3, [pc, #564]	@ (800577c <UART_SetConfig+0x2d0>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d104      	bne.n	8005556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800554c:	f7fd fe7c 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 8005550:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005554:	e003      	b.n	800555e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005556:	f7fd fe63 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 800555a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005568:	f040 810c 	bne.w	8005784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005576:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800557a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800557e:	4622      	mov	r2, r4
 8005580:	462b      	mov	r3, r5
 8005582:	1891      	adds	r1, r2, r2
 8005584:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005586:	415b      	adcs	r3, r3
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800558a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800558e:	4621      	mov	r1, r4
 8005590:	eb12 0801 	adds.w	r8, r2, r1
 8005594:	4629      	mov	r1, r5
 8005596:	eb43 0901 	adc.w	r9, r3, r1
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ae:	4690      	mov	r8, r2
 80055b0:	4699      	mov	r9, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	eb18 0303 	adds.w	r3, r8, r3
 80055b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055bc:	462b      	mov	r3, r5
 80055be:	eb49 0303 	adc.w	r3, r9, r3
 80055c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055da:	460b      	mov	r3, r1
 80055dc:	18db      	adds	r3, r3, r3
 80055de:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e0:	4613      	mov	r3, r2
 80055e2:	eb42 0303 	adc.w	r3, r2, r3
 80055e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055f0:	f7fa fe66 	bl	80002c0 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4b61      	ldr	r3, [pc, #388]	@ (8005780 <UART_SetConfig+0x2d4>)
 80055fa:	fba3 2302 	umull	r2, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	011c      	lsls	r4, r3, #4
 8005602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005606:	2200      	movs	r2, #0
 8005608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800560c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	1891      	adds	r1, r2, r2
 800561a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800561c:	415b      	adcs	r3, r3
 800561e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005624:	4641      	mov	r1, r8
 8005626:	eb12 0a01 	adds.w	sl, r2, r1
 800562a:	4649      	mov	r1, r9
 800562c:	eb43 0b01 	adc.w	fp, r3, r1
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800563c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005644:	4692      	mov	sl, r2
 8005646:	469b      	mov	fp, r3
 8005648:	4643      	mov	r3, r8
 800564a:	eb1a 0303 	adds.w	r3, sl, r3
 800564e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005652:	464b      	mov	r3, r9
 8005654:	eb4b 0303 	adc.w	r3, fp, r3
 8005658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005668:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800566c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005670:	460b      	mov	r3, r1
 8005672:	18db      	adds	r3, r3, r3
 8005674:	643b      	str	r3, [r7, #64]	@ 0x40
 8005676:	4613      	mov	r3, r2
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
 800567e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005686:	f7fa fe1b 	bl	80002c0 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4611      	mov	r1, r2
 8005690:	4b3b      	ldr	r3, [pc, #236]	@ (8005780 <UART_SetConfig+0x2d4>)
 8005692:	fba3 2301 	umull	r2, r3, r3, r1
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2264      	movs	r2, #100	@ 0x64
 800569a:	fb02 f303 	mul.w	r3, r2, r3
 800569e:	1acb      	subs	r3, r1, r3
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056a6:	4b36      	ldr	r3, [pc, #216]	@ (8005780 <UART_SetConfig+0x2d4>)
 80056a8:	fba3 2302 	umull	r2, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056b4:	441c      	add	r4, r3
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056d0:	415b      	adcs	r3, r3
 80056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056d8:	4641      	mov	r1, r8
 80056da:	1851      	adds	r1, r2, r1
 80056dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80056de:	4649      	mov	r1, r9
 80056e0:	414b      	adcs	r3, r1
 80056e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056f0:	4659      	mov	r1, fp
 80056f2:	00cb      	lsls	r3, r1, #3
 80056f4:	4651      	mov	r1, sl
 80056f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fa:	4651      	mov	r1, sl
 80056fc:	00ca      	lsls	r2, r1, #3
 80056fe:	4610      	mov	r0, r2
 8005700:	4619      	mov	r1, r3
 8005702:	4603      	mov	r3, r0
 8005704:	4642      	mov	r2, r8
 8005706:	189b      	adds	r3, r3, r2
 8005708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800570c:	464b      	mov	r3, r9
 800570e:	460a      	mov	r2, r1
 8005710:	eb42 0303 	adc.w	r3, r2, r3
 8005714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005724:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800572c:	460b      	mov	r3, r1
 800572e:	18db      	adds	r3, r3, r3
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005732:	4613      	mov	r3, r2
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800573e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005742:	f7fa fdbd 	bl	80002c0 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <UART_SetConfig+0x2d4>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	@ 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	3332      	adds	r3, #50	@ 0x32
 800575e:	4a08      	ldr	r2, [pc, #32]	@ (8005780 <UART_SetConfig+0x2d4>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	f003 0207 	and.w	r2, r3, #7
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4422      	add	r2, r4
 8005772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005774:	e106      	b.n	8005984 <UART_SetConfig+0x4d8>
 8005776:	bf00      	nop
 8005778:	40011000 	.word	0x40011000
 800577c:	40011400 	.word	0x40011400
 8005780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005788:	2200      	movs	r2, #0
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800578e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005796:	4642      	mov	r2, r8
 8005798:	464b      	mov	r3, r9
 800579a:	1891      	adds	r1, r2, r2
 800579c:	6239      	str	r1, [r7, #32]
 800579e:	415b      	adcs	r3, r3
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057a6:	4641      	mov	r1, r8
 80057a8:	1854      	adds	r4, r2, r1
 80057aa:	4649      	mov	r1, r9
 80057ac:	eb43 0501 	adc.w	r5, r3, r1
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	00eb      	lsls	r3, r5, #3
 80057ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057be:	00e2      	lsls	r2, r4, #3
 80057c0:	4614      	mov	r4, r2
 80057c2:	461d      	mov	r5, r3
 80057c4:	4643      	mov	r3, r8
 80057c6:	18e3      	adds	r3, r4, r3
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057cc:	464b      	mov	r3, r9
 80057ce:	eb45 0303 	adc.w	r3, r5, r3
 80057d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057f2:	4629      	mov	r1, r5
 80057f4:	008b      	lsls	r3, r1, #2
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057fc:	4621      	mov	r1, r4
 80057fe:	008a      	lsls	r2, r1, #2
 8005800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005804:	f7fa fd5c 	bl	80002c0 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4b60      	ldr	r3, [pc, #384]	@ (8005990 <UART_SetConfig+0x4e4>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011c      	lsls	r4, r3, #4
 8005816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581a:	2200      	movs	r2, #0
 800581c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005820:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005828:	4642      	mov	r2, r8
 800582a:	464b      	mov	r3, r9
 800582c:	1891      	adds	r1, r2, r2
 800582e:	61b9      	str	r1, [r7, #24]
 8005830:	415b      	adcs	r3, r3
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005838:	4641      	mov	r1, r8
 800583a:	1851      	adds	r1, r2, r1
 800583c:	6139      	str	r1, [r7, #16]
 800583e:	4649      	mov	r1, r9
 8005840:	414b      	adcs	r3, r1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005850:	4659      	mov	r1, fp
 8005852:	00cb      	lsls	r3, r1, #3
 8005854:	4651      	mov	r1, sl
 8005856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585a:	4651      	mov	r1, sl
 800585c:	00ca      	lsls	r2, r1, #3
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	4603      	mov	r3, r0
 8005864:	4642      	mov	r2, r8
 8005866:	189b      	adds	r3, r3, r2
 8005868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800586c:	464b      	mov	r3, r9
 800586e:	460a      	mov	r2, r1
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005882:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005890:	4649      	mov	r1, r9
 8005892:	008b      	lsls	r3, r1, #2
 8005894:	4641      	mov	r1, r8
 8005896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800589a:	4641      	mov	r1, r8
 800589c:	008a      	lsls	r2, r1, #2
 800589e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058a2:	f7fa fd0d 	bl	80002c0 <__aeabi_uldivmod>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	4b38      	ldr	r3, [pc, #224]	@ (8005990 <UART_SetConfig+0x4e4>)
 80058ae:	fba3 2301 	umull	r2, r3, r3, r1
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	2264      	movs	r2, #100	@ 0x64
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	1acb      	subs	r3, r1, r3
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	3332      	adds	r3, #50	@ 0x32
 80058c0:	4a33      	ldr	r2, [pc, #204]	@ (8005990 <UART_SetConfig+0x4e4>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058cc:	441c      	add	r4, r3
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80058d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80058d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	415b      	adcs	r3, r3
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ec:	4641      	mov	r1, r8
 80058ee:	1851      	adds	r1, r2, r1
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	4649      	mov	r1, r9
 80058f4:	414b      	adcs	r3, r1
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005904:	4659      	mov	r1, fp
 8005906:	00cb      	lsls	r3, r1, #3
 8005908:	4651      	mov	r1, sl
 800590a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590e:	4651      	mov	r1, sl
 8005910:	00ca      	lsls	r2, r1, #3
 8005912:	4610      	mov	r0, r2
 8005914:	4619      	mov	r1, r3
 8005916:	4603      	mov	r3, r0
 8005918:	4642      	mov	r2, r8
 800591a:	189b      	adds	r3, r3, r2
 800591c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800591e:	464b      	mov	r3, r9
 8005920:	460a      	mov	r2, r1
 8005922:	eb42 0303 	adc.w	r3, r2, r3
 8005926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	663b      	str	r3, [r7, #96]	@ 0x60
 8005932:	667a      	str	r2, [r7, #100]	@ 0x64
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005940:	4649      	mov	r1, r9
 8005942:	008b      	lsls	r3, r1, #2
 8005944:	4641      	mov	r1, r8
 8005946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800594a:	4641      	mov	r1, r8
 800594c:	008a      	lsls	r2, r1, #2
 800594e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005952:	f7fa fcb5 	bl	80002c0 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <UART_SetConfig+0x4e4>)
 800595c:	fba3 1302 	umull	r1, r3, r3, r2
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	2164      	movs	r1, #100	@ 0x64
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	3332      	adds	r3, #50	@ 0x32
 800596e:	4a08      	ldr	r2, [pc, #32]	@ (8005990 <UART_SetConfig+0x4e4>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4422      	add	r2, r4
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800598a:	46bd      	mov	sp, r7
 800598c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005990:	51eb851f 	.word	0x51eb851f

08005994 <siprintf>:
 8005994:	b40e      	push	{r1, r2, r3}
 8005996:	b500      	push	{lr}
 8005998:	b09c      	sub	sp, #112	@ 0x70
 800599a:	ab1d      	add	r3, sp, #116	@ 0x74
 800599c:	9002      	str	r0, [sp, #8]
 800599e:	9006      	str	r0, [sp, #24]
 80059a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059a4:	4809      	ldr	r0, [pc, #36]	@ (80059cc <siprintf+0x38>)
 80059a6:	9107      	str	r1, [sp, #28]
 80059a8:	9104      	str	r1, [sp, #16]
 80059aa:	4909      	ldr	r1, [pc, #36]	@ (80059d0 <siprintf+0x3c>)
 80059ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b0:	9105      	str	r1, [sp, #20]
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	a902      	add	r1, sp, #8
 80059b8:	f000 f9f4 	bl	8005da4 <_svfiprintf_r>
 80059bc:	9b02      	ldr	r3, [sp, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	b01c      	add	sp, #112	@ 0x70
 80059c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c8:	b003      	add	sp, #12
 80059ca:	4770      	bx	lr
 80059cc:	20000018 	.word	0x20000018
 80059d0:	ffff0208 	.word	0xffff0208

080059d4 <_vsniprintf_r>:
 80059d4:	b530      	push	{r4, r5, lr}
 80059d6:	4614      	mov	r4, r2
 80059d8:	2c00      	cmp	r4, #0
 80059da:	b09b      	sub	sp, #108	@ 0x6c
 80059dc:	4605      	mov	r5, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	da05      	bge.n	80059ee <_vsniprintf_r+0x1a>
 80059e2:	238b      	movs	r3, #139	@ 0x8b
 80059e4:	6003      	str	r3, [r0, #0]
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ea:	b01b      	add	sp, #108	@ 0x6c
 80059ec:	bd30      	pop	{r4, r5, pc}
 80059ee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80059f6:	bf14      	ite	ne
 80059f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059fc:	4623      	moveq	r3, r4
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	9305      	str	r3, [sp, #20]
 8005a02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a06:	9100      	str	r1, [sp, #0]
 8005a08:	9104      	str	r1, [sp, #16]
 8005a0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005a0e:	4669      	mov	r1, sp
 8005a10:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005a12:	f000 f9c7 	bl	8005da4 <_svfiprintf_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	bfbc      	itt	lt
 8005a1a:	238b      	movlt	r3, #139	@ 0x8b
 8005a1c:	602b      	strlt	r3, [r5, #0]
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	d0e3      	beq.n	80059ea <_vsniprintf_r+0x16>
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e7df      	b.n	80059ea <_vsniprintf_r+0x16>
	...

08005a2c <vsniprintf>:
 8005a2c:	b507      	push	{r0, r1, r2, lr}
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	460a      	mov	r2, r1
 8005a34:	4601      	mov	r1, r0
 8005a36:	4803      	ldr	r0, [pc, #12]	@ (8005a44 <vsniprintf+0x18>)
 8005a38:	6800      	ldr	r0, [r0, #0]
 8005a3a:	f7ff ffcb 	bl	80059d4 <_vsniprintf_r>
 8005a3e:	b003      	add	sp, #12
 8005a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a44:	20000018 	.word	0x20000018

08005a48 <memset>:
 8005a48:	4402      	add	r2, r0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d100      	bne.n	8005a52 <memset+0xa>
 8005a50:	4770      	bx	lr
 8005a52:	f803 1b01 	strb.w	r1, [r3], #1
 8005a56:	e7f9      	b.n	8005a4c <memset+0x4>

08005a58 <strcat>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	7814      	ldrb	r4, [r2, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	3201      	adds	r2, #1
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	d1fa      	bne.n	8005a5c <strcat+0x4>
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	d1f9      	bne.n	8005a68 <strcat+0x10>
 8005a74:	bd10      	pop	{r4, pc}
	...

08005a78 <__errno>:
 8005a78:	4b01      	ldr	r3, [pc, #4]	@ (8005a80 <__errno+0x8>)
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000018 	.word	0x20000018

08005a84 <__libc_init_array>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4d0d      	ldr	r5, [pc, #52]	@ (8005abc <__libc_init_array+0x38>)
 8005a88:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac0 <__libc_init_array+0x3c>)
 8005a8a:	1b64      	subs	r4, r4, r5
 8005a8c:	10a4      	asrs	r4, r4, #2
 8005a8e:	2600      	movs	r6, #0
 8005a90:	42a6      	cmp	r6, r4
 8005a92:	d109      	bne.n	8005aa8 <__libc_init_array+0x24>
 8005a94:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac4 <__libc_init_array+0x40>)
 8005a96:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac8 <__libc_init_array+0x44>)
 8005a98:	f000 fc6e 	bl	8006378 <_init>
 8005a9c:	1b64      	subs	r4, r4, r5
 8005a9e:	10a4      	asrs	r4, r4, #2
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	42a6      	cmp	r6, r4
 8005aa4:	d105      	bne.n	8005ab2 <__libc_init_array+0x2e>
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aac:	4798      	blx	r3
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7ee      	b.n	8005a90 <__libc_init_array+0xc>
 8005ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab6:	4798      	blx	r3
 8005ab8:	3601      	adds	r6, #1
 8005aba:	e7f2      	b.n	8005aa2 <__libc_init_array+0x1e>
 8005abc:	08006794 	.word	0x08006794
 8005ac0:	08006794 	.word	0x08006794
 8005ac4:	08006794 	.word	0x08006794
 8005ac8:	08006798 	.word	0x08006798

08005acc <__retarget_lock_acquire_recursive>:
 8005acc:	4770      	bx	lr

08005ace <__retarget_lock_release_recursive>:
 8005ace:	4770      	bx	lr

08005ad0 <strcpy>:
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ad6:	f803 2b01 	strb.w	r2, [r3], #1
 8005ada:	2a00      	cmp	r2, #0
 8005adc:	d1f9      	bne.n	8005ad2 <strcpy+0x2>
 8005ade:	4770      	bx	lr

08005ae0 <memcpy>:
 8005ae0:	440a      	add	r2, r1
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae8:	d100      	bne.n	8005aec <memcpy+0xc>
 8005aea:	4770      	bx	lr
 8005aec:	b510      	push	{r4, lr}
 8005aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af6:	4291      	cmp	r1, r2
 8005af8:	d1f9      	bne.n	8005aee <memcpy+0xe>
 8005afa:	bd10      	pop	{r4, pc}

08005afc <_free_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4605      	mov	r5, r0
 8005b00:	2900      	cmp	r1, #0
 8005b02:	d041      	beq.n	8005b88 <_free_r+0x8c>
 8005b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b08:	1f0c      	subs	r4, r1, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bfb8      	it	lt
 8005b0e:	18e4      	addlt	r4, r4, r3
 8005b10:	f000 f8e0 	bl	8005cd4 <__malloc_lock>
 8005b14:	4a1d      	ldr	r2, [pc, #116]	@ (8005b8c <_free_r+0x90>)
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	b933      	cbnz	r3, 8005b28 <_free_r+0x2c>
 8005b1a:	6063      	str	r3, [r4, #4]
 8005b1c:	6014      	str	r4, [r2, #0]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b24:	f000 b8dc 	b.w	8005ce0 <__malloc_unlock>
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	d908      	bls.n	8005b3e <_free_r+0x42>
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	1821      	adds	r1, r4, r0
 8005b30:	428b      	cmp	r3, r1
 8005b32:	bf01      	itttt	eq
 8005b34:	6819      	ldreq	r1, [r3, #0]
 8005b36:	685b      	ldreq	r3, [r3, #4]
 8005b38:	1809      	addeq	r1, r1, r0
 8005b3a:	6021      	streq	r1, [r4, #0]
 8005b3c:	e7ed      	b.n	8005b1a <_free_r+0x1e>
 8005b3e:	461a      	mov	r2, r3
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	b10b      	cbz	r3, 8005b48 <_free_r+0x4c>
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d9fa      	bls.n	8005b3e <_free_r+0x42>
 8005b48:	6811      	ldr	r1, [r2, #0]
 8005b4a:	1850      	adds	r0, r2, r1
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d10b      	bne.n	8005b68 <_free_r+0x6c>
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	4401      	add	r1, r0
 8005b54:	1850      	adds	r0, r2, r1
 8005b56:	4283      	cmp	r3, r0
 8005b58:	6011      	str	r1, [r2, #0]
 8005b5a:	d1e0      	bne.n	8005b1e <_free_r+0x22>
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	6053      	str	r3, [r2, #4]
 8005b62:	4408      	add	r0, r1
 8005b64:	6010      	str	r0, [r2, #0]
 8005b66:	e7da      	b.n	8005b1e <_free_r+0x22>
 8005b68:	d902      	bls.n	8005b70 <_free_r+0x74>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	602b      	str	r3, [r5, #0]
 8005b6e:	e7d6      	b.n	8005b1e <_free_r+0x22>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	1821      	adds	r1, r4, r0
 8005b74:	428b      	cmp	r3, r1
 8005b76:	bf04      	itt	eq
 8005b78:	6819      	ldreq	r1, [r3, #0]
 8005b7a:	685b      	ldreq	r3, [r3, #4]
 8005b7c:	6063      	str	r3, [r4, #4]
 8005b7e:	bf04      	itt	eq
 8005b80:	1809      	addeq	r1, r1, r0
 8005b82:	6021      	streq	r1, [r4, #0]
 8005b84:	6054      	str	r4, [r2, #4]
 8005b86:	e7ca      	b.n	8005b1e <_free_r+0x22>
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000408 	.word	0x20000408

08005b90 <sbrk_aligned>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4e0f      	ldr	r6, [pc, #60]	@ (8005bd0 <sbrk_aligned+0x40>)
 8005b94:	460c      	mov	r4, r1
 8005b96:	6831      	ldr	r1, [r6, #0]
 8005b98:	4605      	mov	r5, r0
 8005b9a:	b911      	cbnz	r1, 8005ba2 <sbrk_aligned+0x12>
 8005b9c:	f000 fba6 	bl	80062ec <_sbrk_r>
 8005ba0:	6030      	str	r0, [r6, #0]
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f000 fba1 	bl	80062ec <_sbrk_r>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d103      	bne.n	8005bb6 <sbrk_aligned+0x26>
 8005bae:	f04f 34ff 	mov.w	r4, #4294967295
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
 8005bb6:	1cc4      	adds	r4, r0, #3
 8005bb8:	f024 0403 	bic.w	r4, r4, #3
 8005bbc:	42a0      	cmp	r0, r4
 8005bbe:	d0f8      	beq.n	8005bb2 <sbrk_aligned+0x22>
 8005bc0:	1a21      	subs	r1, r4, r0
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 fb92 	bl	80062ec <_sbrk_r>
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d1f2      	bne.n	8005bb2 <sbrk_aligned+0x22>
 8005bcc:	e7ef      	b.n	8005bae <sbrk_aligned+0x1e>
 8005bce:	bf00      	nop
 8005bd0:	20000404 	.word	0x20000404

08005bd4 <_malloc_r>:
 8005bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	1ccd      	adds	r5, r1, #3
 8005bda:	f025 0503 	bic.w	r5, r5, #3
 8005bde:	3508      	adds	r5, #8
 8005be0:	2d0c      	cmp	r5, #12
 8005be2:	bf38      	it	cc
 8005be4:	250c      	movcc	r5, #12
 8005be6:	2d00      	cmp	r5, #0
 8005be8:	4606      	mov	r6, r0
 8005bea:	db01      	blt.n	8005bf0 <_malloc_r+0x1c>
 8005bec:	42a9      	cmp	r1, r5
 8005bee:	d904      	bls.n	8005bfa <_malloc_r+0x26>
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	6033      	str	r3, [r6, #0]
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cd0 <_malloc_r+0xfc>
 8005bfe:	f000 f869 	bl	8005cd4 <__malloc_lock>
 8005c02:	f8d8 3000 	ldr.w	r3, [r8]
 8005c06:	461c      	mov	r4, r3
 8005c08:	bb44      	cbnz	r4, 8005c5c <_malloc_r+0x88>
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff ffbf 	bl	8005b90 <sbrk_aligned>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	4604      	mov	r4, r0
 8005c16:	d158      	bne.n	8005cca <_malloc_r+0xf6>
 8005c18:	f8d8 4000 	ldr.w	r4, [r8]
 8005c1c:	4627      	mov	r7, r4
 8005c1e:	2f00      	cmp	r7, #0
 8005c20:	d143      	bne.n	8005caa <_malloc_r+0xd6>
 8005c22:	2c00      	cmp	r4, #0
 8005c24:	d04b      	beq.n	8005cbe <_malloc_r+0xea>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	4639      	mov	r1, r7
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	eb04 0903 	add.w	r9, r4, r3
 8005c30:	f000 fb5c 	bl	80062ec <_sbrk_r>
 8005c34:	4581      	cmp	r9, r0
 8005c36:	d142      	bne.n	8005cbe <_malloc_r+0xea>
 8005c38:	6821      	ldr	r1, [r4, #0]
 8005c3a:	1a6d      	subs	r5, r5, r1
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff ffa6 	bl	8005b90 <sbrk_aligned>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d03a      	beq.n	8005cbe <_malloc_r+0xea>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	442b      	add	r3, r5
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	bb62      	cbnz	r2, 8005cb0 <_malloc_r+0xdc>
 8005c56:	f8c8 7000 	str.w	r7, [r8]
 8005c5a:	e00f      	b.n	8005c7c <_malloc_r+0xa8>
 8005c5c:	6822      	ldr	r2, [r4, #0]
 8005c5e:	1b52      	subs	r2, r2, r5
 8005c60:	d420      	bmi.n	8005ca4 <_malloc_r+0xd0>
 8005c62:	2a0b      	cmp	r2, #11
 8005c64:	d917      	bls.n	8005c96 <_malloc_r+0xc2>
 8005c66:	1961      	adds	r1, r4, r5
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	6025      	str	r5, [r4, #0]
 8005c6c:	bf18      	it	ne
 8005c6e:	6059      	strne	r1, [r3, #4]
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	bf08      	it	eq
 8005c74:	f8c8 1000 	streq.w	r1, [r8]
 8005c78:	5162      	str	r2, [r4, r5]
 8005c7a:	604b      	str	r3, [r1, #4]
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f000 f82f 	bl	8005ce0 <__malloc_unlock>
 8005c82:	f104 000b 	add.w	r0, r4, #11
 8005c86:	1d23      	adds	r3, r4, #4
 8005c88:	f020 0007 	bic.w	r0, r0, #7
 8005c8c:	1ac2      	subs	r2, r0, r3
 8005c8e:	bf1c      	itt	ne
 8005c90:	1a1b      	subne	r3, r3, r0
 8005c92:	50a3      	strne	r3, [r4, r2]
 8005c94:	e7af      	b.n	8005bf6 <_malloc_r+0x22>
 8005c96:	6862      	ldr	r2, [r4, #4]
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	bf0c      	ite	eq
 8005c9c:	f8c8 2000 	streq.w	r2, [r8]
 8005ca0:	605a      	strne	r2, [r3, #4]
 8005ca2:	e7eb      	b.n	8005c7c <_malloc_r+0xa8>
 8005ca4:	4623      	mov	r3, r4
 8005ca6:	6864      	ldr	r4, [r4, #4]
 8005ca8:	e7ae      	b.n	8005c08 <_malloc_r+0x34>
 8005caa:	463c      	mov	r4, r7
 8005cac:	687f      	ldr	r7, [r7, #4]
 8005cae:	e7b6      	b.n	8005c1e <_malloc_r+0x4a>
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	d1fb      	bne.n	8005cb0 <_malloc_r+0xdc>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6053      	str	r3, [r2, #4]
 8005cbc:	e7de      	b.n	8005c7c <_malloc_r+0xa8>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f000 f80c 	bl	8005ce0 <__malloc_unlock>
 8005cc8:	e794      	b.n	8005bf4 <_malloc_r+0x20>
 8005cca:	6005      	str	r5, [r0, #0]
 8005ccc:	e7d6      	b.n	8005c7c <_malloc_r+0xa8>
 8005cce:	bf00      	nop
 8005cd0:	20000408 	.word	0x20000408

08005cd4 <__malloc_lock>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	@ (8005cdc <__malloc_lock+0x8>)
 8005cd6:	f7ff bef9 	b.w	8005acc <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000400 	.word	0x20000400

08005ce0 <__malloc_unlock>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	@ (8005ce8 <__malloc_unlock+0x8>)
 8005ce2:	f7ff bef4 	b.w	8005ace <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000400 	.word	0x20000400

08005cec <__ssputs_r>:
 8005cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	688e      	ldr	r6, [r1, #8]
 8005cf2:	461f      	mov	r7, r3
 8005cf4:	42be      	cmp	r6, r7
 8005cf6:	680b      	ldr	r3, [r1, #0]
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4690      	mov	r8, r2
 8005cfe:	d82d      	bhi.n	8005d5c <__ssputs_r+0x70>
 8005d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d08:	d026      	beq.n	8005d58 <__ssputs_r+0x6c>
 8005d0a:	6965      	ldr	r5, [r4, #20]
 8005d0c:	6909      	ldr	r1, [r1, #16]
 8005d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d12:	eba3 0901 	sub.w	r9, r3, r1
 8005d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d1a:	1c7b      	adds	r3, r7, #1
 8005d1c:	444b      	add	r3, r9
 8005d1e:	106d      	asrs	r5, r5, #1
 8005d20:	429d      	cmp	r5, r3
 8005d22:	bf38      	it	cc
 8005d24:	461d      	movcc	r5, r3
 8005d26:	0553      	lsls	r3, r2, #21
 8005d28:	d527      	bpl.n	8005d7a <__ssputs_r+0x8e>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	f7ff ff52 	bl	8005bd4 <_malloc_r>
 8005d30:	4606      	mov	r6, r0
 8005d32:	b360      	cbz	r0, 8005d8e <__ssputs_r+0xa2>
 8005d34:	6921      	ldr	r1, [r4, #16]
 8005d36:	464a      	mov	r2, r9
 8005d38:	f7ff fed2 	bl	8005ae0 <memcpy>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	6126      	str	r6, [r4, #16]
 8005d4a:	6165      	str	r5, [r4, #20]
 8005d4c:	444e      	add	r6, r9
 8005d4e:	eba5 0509 	sub.w	r5, r5, r9
 8005d52:	6026      	str	r6, [r4, #0]
 8005d54:	60a5      	str	r5, [r4, #8]
 8005d56:	463e      	mov	r6, r7
 8005d58:	42be      	cmp	r6, r7
 8005d5a:	d900      	bls.n	8005d5e <__ssputs_r+0x72>
 8005d5c:	463e      	mov	r6, r7
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	4632      	mov	r2, r6
 8005d62:	4641      	mov	r1, r8
 8005d64:	f000 faa8 	bl	80062b8 <memmove>
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	1b9b      	subs	r3, r3, r6
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	4433      	add	r3, r6
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	2000      	movs	r0, #0
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	f000 fac6 	bl	800630c <_realloc_r>
 8005d80:	4606      	mov	r6, r0
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d1e0      	bne.n	8005d48 <__ssputs_r+0x5c>
 8005d86:	6921      	ldr	r1, [r4, #16]
 8005d88:	4650      	mov	r0, sl
 8005d8a:	f7ff feb7 	bl	8005afc <_free_r>
 8005d8e:	230c      	movs	r3, #12
 8005d90:	f8ca 3000 	str.w	r3, [sl]
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d9a:	81a3      	strh	r3, [r4, #12]
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	e7e9      	b.n	8005d76 <__ssputs_r+0x8a>
	...

08005da4 <_svfiprintf_r>:
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	4698      	mov	r8, r3
 8005daa:	898b      	ldrh	r3, [r1, #12]
 8005dac:	061b      	lsls	r3, r3, #24
 8005dae:	b09d      	sub	sp, #116	@ 0x74
 8005db0:	4607      	mov	r7, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	4614      	mov	r4, r2
 8005db6:	d510      	bpl.n	8005dda <_svfiprintf_r+0x36>
 8005db8:	690b      	ldr	r3, [r1, #16]
 8005dba:	b973      	cbnz	r3, 8005dda <_svfiprintf_r+0x36>
 8005dbc:	2140      	movs	r1, #64	@ 0x40
 8005dbe:	f7ff ff09 	bl	8005bd4 <_malloc_r>
 8005dc2:	6028      	str	r0, [r5, #0]
 8005dc4:	6128      	str	r0, [r5, #16]
 8005dc6:	b930      	cbnz	r0, 8005dd6 <_svfiprintf_r+0x32>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	b01d      	add	sp, #116	@ 0x74
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	2340      	movs	r3, #64	@ 0x40
 8005dd8:	616b      	str	r3, [r5, #20]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dde:	2320      	movs	r3, #32
 8005de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de8:	2330      	movs	r3, #48	@ 0x30
 8005dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f88 <_svfiprintf_r+0x1e4>
 8005dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005df2:	f04f 0901 	mov.w	r9, #1
 8005df6:	4623      	mov	r3, r4
 8005df8:	469a      	mov	sl, r3
 8005dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dfe:	b10a      	cbz	r2, 8005e04 <_svfiprintf_r+0x60>
 8005e00:	2a25      	cmp	r2, #37	@ 0x25
 8005e02:	d1f9      	bne.n	8005df8 <_svfiprintf_r+0x54>
 8005e04:	ebba 0b04 	subs.w	fp, sl, r4
 8005e08:	d00b      	beq.n	8005e22 <_svfiprintf_r+0x7e>
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4638      	mov	r0, r7
 8005e12:	f7ff ff6b 	bl	8005cec <__ssputs_r>
 8005e16:	3001      	adds	r0, #1
 8005e18:	f000 80a7 	beq.w	8005f6a <_svfiprintf_r+0x1c6>
 8005e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e1e:	445a      	add	r2, fp
 8005e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e22:	f89a 3000 	ldrb.w	r3, [sl]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 809f 	beq.w	8005f6a <_svfiprintf_r+0x1c6>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e36:	f10a 0a01 	add.w	sl, sl, #1
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e44:	4654      	mov	r4, sl
 8005e46:	2205      	movs	r2, #5
 8005e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4c:	484e      	ldr	r0, [pc, #312]	@ (8005f88 <_svfiprintf_r+0x1e4>)
 8005e4e:	f7fa f9e7 	bl	8000220 <memchr>
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	b9d8      	cbnz	r0, 8005e8e <_svfiprintf_r+0xea>
 8005e56:	06d0      	lsls	r0, r2, #27
 8005e58:	bf44      	itt	mi
 8005e5a:	2320      	movmi	r3, #32
 8005e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e60:	0711      	lsls	r1, r2, #28
 8005e62:	bf44      	itt	mi
 8005e64:	232b      	movmi	r3, #43	@ 0x2b
 8005e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e70:	d015      	beq.n	8005e9e <_svfiprintf_r+0xfa>
 8005e72:	9a07      	ldr	r2, [sp, #28]
 8005e74:	4654      	mov	r4, sl
 8005e76:	2000      	movs	r0, #0
 8005e78:	f04f 0c0a 	mov.w	ip, #10
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e82:	3b30      	subs	r3, #48	@ 0x30
 8005e84:	2b09      	cmp	r3, #9
 8005e86:	d94b      	bls.n	8005f20 <_svfiprintf_r+0x17c>
 8005e88:	b1b0      	cbz	r0, 8005eb8 <_svfiprintf_r+0x114>
 8005e8a:	9207      	str	r2, [sp, #28]
 8005e8c:	e014      	b.n	8005eb8 <_svfiprintf_r+0x114>
 8005e8e:	eba0 0308 	sub.w	r3, r0, r8
 8005e92:	fa09 f303 	lsl.w	r3, r9, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	46a2      	mov	sl, r4
 8005e9c:	e7d2      	b.n	8005e44 <_svfiprintf_r+0xa0>
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	1d19      	adds	r1, r3, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	9103      	str	r1, [sp, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bfbb      	ittet	lt
 8005eaa:	425b      	neglt	r3, r3
 8005eac:	f042 0202 	orrlt.w	r2, r2, #2
 8005eb0:	9307      	strge	r3, [sp, #28]
 8005eb2:	9307      	strlt	r3, [sp, #28]
 8005eb4:	bfb8      	it	lt
 8005eb6:	9204      	strlt	r2, [sp, #16]
 8005eb8:	7823      	ldrb	r3, [r4, #0]
 8005eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ebc:	d10a      	bne.n	8005ed4 <_svfiprintf_r+0x130>
 8005ebe:	7863      	ldrb	r3, [r4, #1]
 8005ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec2:	d132      	bne.n	8005f2a <_svfiprintf_r+0x186>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	1d1a      	adds	r2, r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	9203      	str	r2, [sp, #12]
 8005ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ed0:	3402      	adds	r4, #2
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f98 <_svfiprintf_r+0x1f4>
 8005ed8:	7821      	ldrb	r1, [r4, #0]
 8005eda:	2203      	movs	r2, #3
 8005edc:	4650      	mov	r0, sl
 8005ede:	f7fa f99f 	bl	8000220 <memchr>
 8005ee2:	b138      	cbz	r0, 8005ef4 <_svfiprintf_r+0x150>
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	eba0 000a 	sub.w	r0, r0, sl
 8005eea:	2240      	movs	r2, #64	@ 0x40
 8005eec:	4082      	lsls	r2, r0
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	3401      	adds	r4, #1
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	4824      	ldr	r0, [pc, #144]	@ (8005f8c <_svfiprintf_r+0x1e8>)
 8005efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005efe:	2206      	movs	r2, #6
 8005f00:	f7fa f98e 	bl	8000220 <memchr>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d036      	beq.n	8005f76 <_svfiprintf_r+0x1d2>
 8005f08:	4b21      	ldr	r3, [pc, #132]	@ (8005f90 <_svfiprintf_r+0x1ec>)
 8005f0a:	bb1b      	cbnz	r3, 8005f54 <_svfiprintf_r+0x1b0>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	3307      	adds	r3, #7
 8005f10:	f023 0307 	bic.w	r3, r3, #7
 8005f14:	3308      	adds	r3, #8
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1a:	4433      	add	r3, r6
 8005f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f1e:	e76a      	b.n	8005df6 <_svfiprintf_r+0x52>
 8005f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f24:	460c      	mov	r4, r1
 8005f26:	2001      	movs	r0, #1
 8005f28:	e7a8      	b.n	8005e7c <_svfiprintf_r+0xd8>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	3401      	adds	r4, #1
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	4619      	mov	r1, r3
 8005f32:	f04f 0c0a 	mov.w	ip, #10
 8005f36:	4620      	mov	r0, r4
 8005f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3c:	3a30      	subs	r2, #48	@ 0x30
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d903      	bls.n	8005f4a <_svfiprintf_r+0x1a6>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c6      	beq.n	8005ed4 <_svfiprintf_r+0x130>
 8005f46:	9105      	str	r1, [sp, #20]
 8005f48:	e7c4      	b.n	8005ed4 <_svfiprintf_r+0x130>
 8005f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f4e:	4604      	mov	r4, r0
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7f0      	b.n	8005f36 <_svfiprintf_r+0x192>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f94 <_svfiprintf_r+0x1f0>)
 8005f5c:	a904      	add	r1, sp, #16
 8005f5e:	4638      	mov	r0, r7
 8005f60:	f3af 8000 	nop.w
 8005f64:	1c42      	adds	r2, r0, #1
 8005f66:	4606      	mov	r6, r0
 8005f68:	d1d6      	bne.n	8005f18 <_svfiprintf_r+0x174>
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	065b      	lsls	r3, r3, #25
 8005f6e:	f53f af2d 	bmi.w	8005dcc <_svfiprintf_r+0x28>
 8005f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f74:	e72c      	b.n	8005dd0 <_svfiprintf_r+0x2c>
 8005f76:	ab03      	add	r3, sp, #12
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	462a      	mov	r2, r5
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <_svfiprintf_r+0x1f0>)
 8005f7e:	a904      	add	r1, sp, #16
 8005f80:	4638      	mov	r0, r7
 8005f82:	f000 f879 	bl	8006078 <_printf_i>
 8005f86:	e7ed      	b.n	8005f64 <_svfiprintf_r+0x1c0>
 8005f88:	08006758 	.word	0x08006758
 8005f8c:	08006762 	.word	0x08006762
 8005f90:	00000000 	.word	0x00000000
 8005f94:	08005ced 	.word	0x08005ced
 8005f98:	0800675e 	.word	0x0800675e

08005f9c <_printf_common>:
 8005f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	4616      	mov	r6, r2
 8005fa2:	4698      	mov	r8, r3
 8005fa4:	688a      	ldr	r2, [r1, #8]
 8005fa6:	690b      	ldr	r3, [r1, #16]
 8005fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fac:	4293      	cmp	r3, r2
 8005fae:	bfb8      	it	lt
 8005fb0:	4613      	movlt	r3, r2
 8005fb2:	6033      	str	r3, [r6, #0]
 8005fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fb8:	4607      	mov	r7, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	b10a      	cbz	r2, 8005fc2 <_printf_common+0x26>
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	6033      	str	r3, [r6, #0]
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	0699      	lsls	r1, r3, #26
 8005fc6:	bf42      	ittt	mi
 8005fc8:	6833      	ldrmi	r3, [r6, #0]
 8005fca:	3302      	addmi	r3, #2
 8005fcc:	6033      	strmi	r3, [r6, #0]
 8005fce:	6825      	ldr	r5, [r4, #0]
 8005fd0:	f015 0506 	ands.w	r5, r5, #6
 8005fd4:	d106      	bne.n	8005fe4 <_printf_common+0x48>
 8005fd6:	f104 0a19 	add.w	sl, r4, #25
 8005fda:	68e3      	ldr	r3, [r4, #12]
 8005fdc:	6832      	ldr	r2, [r6, #0]
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	42ab      	cmp	r3, r5
 8005fe2:	dc26      	bgt.n	8006032 <_printf_common+0x96>
 8005fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	3b00      	subs	r3, #0
 8005fec:	bf18      	it	ne
 8005fee:	2301      	movne	r3, #1
 8005ff0:	0692      	lsls	r2, r2, #26
 8005ff2:	d42b      	bmi.n	800604c <_printf_common+0xb0>
 8005ff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	47c8      	blx	r9
 8005ffe:	3001      	adds	r0, #1
 8006000:	d01e      	beq.n	8006040 <_printf_common+0xa4>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	6922      	ldr	r2, [r4, #16]
 8006006:	f003 0306 	and.w	r3, r3, #6
 800600a:	2b04      	cmp	r3, #4
 800600c:	bf02      	ittt	eq
 800600e:	68e5      	ldreq	r5, [r4, #12]
 8006010:	6833      	ldreq	r3, [r6, #0]
 8006012:	1aed      	subeq	r5, r5, r3
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	bf0c      	ite	eq
 8006018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800601c:	2500      	movne	r5, #0
 800601e:	4293      	cmp	r3, r2
 8006020:	bfc4      	itt	gt
 8006022:	1a9b      	subgt	r3, r3, r2
 8006024:	18ed      	addgt	r5, r5, r3
 8006026:	2600      	movs	r6, #0
 8006028:	341a      	adds	r4, #26
 800602a:	42b5      	cmp	r5, r6
 800602c:	d11a      	bne.n	8006064 <_printf_common+0xc8>
 800602e:	2000      	movs	r0, #0
 8006030:	e008      	b.n	8006044 <_printf_common+0xa8>
 8006032:	2301      	movs	r3, #1
 8006034:	4652      	mov	r2, sl
 8006036:	4641      	mov	r1, r8
 8006038:	4638      	mov	r0, r7
 800603a:	47c8      	blx	r9
 800603c:	3001      	adds	r0, #1
 800603e:	d103      	bne.n	8006048 <_printf_common+0xac>
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006048:	3501      	adds	r5, #1
 800604a:	e7c6      	b.n	8005fda <_printf_common+0x3e>
 800604c:	18e1      	adds	r1, r4, r3
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	2030      	movs	r0, #48	@ 0x30
 8006052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006056:	4422      	add	r2, r4
 8006058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800605c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006060:	3302      	adds	r3, #2
 8006062:	e7c7      	b.n	8005ff4 <_printf_common+0x58>
 8006064:	2301      	movs	r3, #1
 8006066:	4622      	mov	r2, r4
 8006068:	4641      	mov	r1, r8
 800606a:	4638      	mov	r0, r7
 800606c:	47c8      	blx	r9
 800606e:	3001      	adds	r0, #1
 8006070:	d0e6      	beq.n	8006040 <_printf_common+0xa4>
 8006072:	3601      	adds	r6, #1
 8006074:	e7d9      	b.n	800602a <_printf_common+0x8e>
	...

08006078 <_printf_i>:
 8006078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	7e0f      	ldrb	r7, [r1, #24]
 800607e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006080:	2f78      	cmp	r7, #120	@ 0x78
 8006082:	4691      	mov	r9, r2
 8006084:	4680      	mov	r8, r0
 8006086:	460c      	mov	r4, r1
 8006088:	469a      	mov	sl, r3
 800608a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800608e:	d807      	bhi.n	80060a0 <_printf_i+0x28>
 8006090:	2f62      	cmp	r7, #98	@ 0x62
 8006092:	d80a      	bhi.n	80060aa <_printf_i+0x32>
 8006094:	2f00      	cmp	r7, #0
 8006096:	f000 80d2 	beq.w	800623e <_printf_i+0x1c6>
 800609a:	2f58      	cmp	r7, #88	@ 0x58
 800609c:	f000 80b9 	beq.w	8006212 <_printf_i+0x19a>
 80060a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060a8:	e03a      	b.n	8006120 <_printf_i+0xa8>
 80060aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ae:	2b15      	cmp	r3, #21
 80060b0:	d8f6      	bhi.n	80060a0 <_printf_i+0x28>
 80060b2:	a101      	add	r1, pc, #4	@ (adr r1, 80060b8 <_printf_i+0x40>)
 80060b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b8:	08006111 	.word	0x08006111
 80060bc:	08006125 	.word	0x08006125
 80060c0:	080060a1 	.word	0x080060a1
 80060c4:	080060a1 	.word	0x080060a1
 80060c8:	080060a1 	.word	0x080060a1
 80060cc:	080060a1 	.word	0x080060a1
 80060d0:	08006125 	.word	0x08006125
 80060d4:	080060a1 	.word	0x080060a1
 80060d8:	080060a1 	.word	0x080060a1
 80060dc:	080060a1 	.word	0x080060a1
 80060e0:	080060a1 	.word	0x080060a1
 80060e4:	08006225 	.word	0x08006225
 80060e8:	0800614f 	.word	0x0800614f
 80060ec:	080061df 	.word	0x080061df
 80060f0:	080060a1 	.word	0x080060a1
 80060f4:	080060a1 	.word	0x080060a1
 80060f8:	08006247 	.word	0x08006247
 80060fc:	080060a1 	.word	0x080060a1
 8006100:	0800614f 	.word	0x0800614f
 8006104:	080060a1 	.word	0x080060a1
 8006108:	080060a1 	.word	0x080060a1
 800610c:	080061e7 	.word	0x080061e7
 8006110:	6833      	ldr	r3, [r6, #0]
 8006112:	1d1a      	adds	r2, r3, #4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6032      	str	r2, [r6, #0]
 8006118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800611c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006120:	2301      	movs	r3, #1
 8006122:	e09d      	b.n	8006260 <_printf_i+0x1e8>
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	1d19      	adds	r1, r3, #4
 800612a:	6031      	str	r1, [r6, #0]
 800612c:	0606      	lsls	r6, r0, #24
 800612e:	d501      	bpl.n	8006134 <_printf_i+0xbc>
 8006130:	681d      	ldr	r5, [r3, #0]
 8006132:	e003      	b.n	800613c <_printf_i+0xc4>
 8006134:	0645      	lsls	r5, r0, #25
 8006136:	d5fb      	bpl.n	8006130 <_printf_i+0xb8>
 8006138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800613c:	2d00      	cmp	r5, #0
 800613e:	da03      	bge.n	8006148 <_printf_i+0xd0>
 8006140:	232d      	movs	r3, #45	@ 0x2d
 8006142:	426d      	negs	r5, r5
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006148:	4859      	ldr	r0, [pc, #356]	@ (80062b0 <_printf_i+0x238>)
 800614a:	230a      	movs	r3, #10
 800614c:	e011      	b.n	8006172 <_printf_i+0xfa>
 800614e:	6821      	ldr	r1, [r4, #0]
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	0608      	lsls	r0, r1, #24
 8006154:	f853 5b04 	ldr.w	r5, [r3], #4
 8006158:	d402      	bmi.n	8006160 <_printf_i+0xe8>
 800615a:	0649      	lsls	r1, r1, #25
 800615c:	bf48      	it	mi
 800615e:	b2ad      	uxthmi	r5, r5
 8006160:	2f6f      	cmp	r7, #111	@ 0x6f
 8006162:	4853      	ldr	r0, [pc, #332]	@ (80062b0 <_printf_i+0x238>)
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	bf14      	ite	ne
 8006168:	230a      	movne	r3, #10
 800616a:	2308      	moveq	r3, #8
 800616c:	2100      	movs	r1, #0
 800616e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006172:	6866      	ldr	r6, [r4, #4]
 8006174:	60a6      	str	r6, [r4, #8]
 8006176:	2e00      	cmp	r6, #0
 8006178:	bfa2      	ittt	ge
 800617a:	6821      	ldrge	r1, [r4, #0]
 800617c:	f021 0104 	bicge.w	r1, r1, #4
 8006180:	6021      	strge	r1, [r4, #0]
 8006182:	b90d      	cbnz	r5, 8006188 <_printf_i+0x110>
 8006184:	2e00      	cmp	r6, #0
 8006186:	d04b      	beq.n	8006220 <_printf_i+0x1a8>
 8006188:	4616      	mov	r6, r2
 800618a:	fbb5 f1f3 	udiv	r1, r5, r3
 800618e:	fb03 5711 	mls	r7, r3, r1, r5
 8006192:	5dc7      	ldrb	r7, [r0, r7]
 8006194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006198:	462f      	mov	r7, r5
 800619a:	42bb      	cmp	r3, r7
 800619c:	460d      	mov	r5, r1
 800619e:	d9f4      	bls.n	800618a <_printf_i+0x112>
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d10b      	bne.n	80061bc <_printf_i+0x144>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07df      	lsls	r7, r3, #31
 80061a8:	d508      	bpl.n	80061bc <_printf_i+0x144>
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	6861      	ldr	r1, [r4, #4]
 80061ae:	4299      	cmp	r1, r3
 80061b0:	bfde      	ittt	le
 80061b2:	2330      	movle	r3, #48	@ 0x30
 80061b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061bc:	1b92      	subs	r2, r2, r6
 80061be:	6122      	str	r2, [r4, #16]
 80061c0:	f8cd a000 	str.w	sl, [sp]
 80061c4:	464b      	mov	r3, r9
 80061c6:	aa03      	add	r2, sp, #12
 80061c8:	4621      	mov	r1, r4
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff fee6 	bl	8005f9c <_printf_common>
 80061d0:	3001      	adds	r0, #1
 80061d2:	d14a      	bne.n	800626a <_printf_i+0x1f2>
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	b004      	add	sp, #16
 80061da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f043 0320 	orr.w	r3, r3, #32
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	4833      	ldr	r0, [pc, #204]	@ (80062b4 <_printf_i+0x23c>)
 80061e8:	2778      	movs	r7, #120	@ 0x78
 80061ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	6831      	ldr	r1, [r6, #0]
 80061f2:	061f      	lsls	r7, r3, #24
 80061f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80061f8:	d402      	bmi.n	8006200 <_printf_i+0x188>
 80061fa:	065f      	lsls	r7, r3, #25
 80061fc:	bf48      	it	mi
 80061fe:	b2ad      	uxthmi	r5, r5
 8006200:	6031      	str	r1, [r6, #0]
 8006202:	07d9      	lsls	r1, r3, #31
 8006204:	bf44      	itt	mi
 8006206:	f043 0320 	orrmi.w	r3, r3, #32
 800620a:	6023      	strmi	r3, [r4, #0]
 800620c:	b11d      	cbz	r5, 8006216 <_printf_i+0x19e>
 800620e:	2310      	movs	r3, #16
 8006210:	e7ac      	b.n	800616c <_printf_i+0xf4>
 8006212:	4827      	ldr	r0, [pc, #156]	@ (80062b0 <_printf_i+0x238>)
 8006214:	e7e9      	b.n	80061ea <_printf_i+0x172>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f023 0320 	bic.w	r3, r3, #32
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	e7f6      	b.n	800620e <_printf_i+0x196>
 8006220:	4616      	mov	r6, r2
 8006222:	e7bd      	b.n	80061a0 <_printf_i+0x128>
 8006224:	6833      	ldr	r3, [r6, #0]
 8006226:	6825      	ldr	r5, [r4, #0]
 8006228:	6961      	ldr	r1, [r4, #20]
 800622a:	1d18      	adds	r0, r3, #4
 800622c:	6030      	str	r0, [r6, #0]
 800622e:	062e      	lsls	r6, r5, #24
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	d501      	bpl.n	8006238 <_printf_i+0x1c0>
 8006234:	6019      	str	r1, [r3, #0]
 8006236:	e002      	b.n	800623e <_printf_i+0x1c6>
 8006238:	0668      	lsls	r0, r5, #25
 800623a:	d5fb      	bpl.n	8006234 <_printf_i+0x1bc>
 800623c:	8019      	strh	r1, [r3, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	4616      	mov	r6, r2
 8006244:	e7bc      	b.n	80061c0 <_printf_i+0x148>
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	1d1a      	adds	r2, r3, #4
 800624a:	6032      	str	r2, [r6, #0]
 800624c:	681e      	ldr	r6, [r3, #0]
 800624e:	6862      	ldr	r2, [r4, #4]
 8006250:	2100      	movs	r1, #0
 8006252:	4630      	mov	r0, r6
 8006254:	f7f9 ffe4 	bl	8000220 <memchr>
 8006258:	b108      	cbz	r0, 800625e <_printf_i+0x1e6>
 800625a:	1b80      	subs	r0, r0, r6
 800625c:	6060      	str	r0, [r4, #4]
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	2300      	movs	r3, #0
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006268:	e7aa      	b.n	80061c0 <_printf_i+0x148>
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	4632      	mov	r2, r6
 800626e:	4649      	mov	r1, r9
 8006270:	4640      	mov	r0, r8
 8006272:	47d0      	blx	sl
 8006274:	3001      	adds	r0, #1
 8006276:	d0ad      	beq.n	80061d4 <_printf_i+0x15c>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	079b      	lsls	r3, r3, #30
 800627c:	d413      	bmi.n	80062a6 <_printf_i+0x22e>
 800627e:	68e0      	ldr	r0, [r4, #12]
 8006280:	9b03      	ldr	r3, [sp, #12]
 8006282:	4298      	cmp	r0, r3
 8006284:	bfb8      	it	lt
 8006286:	4618      	movlt	r0, r3
 8006288:	e7a6      	b.n	80061d8 <_printf_i+0x160>
 800628a:	2301      	movs	r3, #1
 800628c:	4632      	mov	r2, r6
 800628e:	4649      	mov	r1, r9
 8006290:	4640      	mov	r0, r8
 8006292:	47d0      	blx	sl
 8006294:	3001      	adds	r0, #1
 8006296:	d09d      	beq.n	80061d4 <_printf_i+0x15c>
 8006298:	3501      	adds	r5, #1
 800629a:	68e3      	ldr	r3, [r4, #12]
 800629c:	9903      	ldr	r1, [sp, #12]
 800629e:	1a5b      	subs	r3, r3, r1
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	dcf2      	bgt.n	800628a <_printf_i+0x212>
 80062a4:	e7eb      	b.n	800627e <_printf_i+0x206>
 80062a6:	2500      	movs	r5, #0
 80062a8:	f104 0619 	add.w	r6, r4, #25
 80062ac:	e7f5      	b.n	800629a <_printf_i+0x222>
 80062ae:	bf00      	nop
 80062b0:	08006769 	.word	0x08006769
 80062b4:	0800677a 	.word	0x0800677a

080062b8 <memmove>:
 80062b8:	4288      	cmp	r0, r1
 80062ba:	b510      	push	{r4, lr}
 80062bc:	eb01 0402 	add.w	r4, r1, r2
 80062c0:	d902      	bls.n	80062c8 <memmove+0x10>
 80062c2:	4284      	cmp	r4, r0
 80062c4:	4623      	mov	r3, r4
 80062c6:	d807      	bhi.n	80062d8 <memmove+0x20>
 80062c8:	1e43      	subs	r3, r0, #1
 80062ca:	42a1      	cmp	r1, r4
 80062cc:	d008      	beq.n	80062e0 <memmove+0x28>
 80062ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062d6:	e7f8      	b.n	80062ca <memmove+0x12>
 80062d8:	4402      	add	r2, r0
 80062da:	4601      	mov	r1, r0
 80062dc:	428a      	cmp	r2, r1
 80062de:	d100      	bne.n	80062e2 <memmove+0x2a>
 80062e0:	bd10      	pop	{r4, pc}
 80062e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062ea:	e7f7      	b.n	80062dc <memmove+0x24>

080062ec <_sbrk_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d06      	ldr	r5, [pc, #24]	@ (8006308 <_sbrk_r+0x1c>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	4604      	mov	r4, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	f7fb fc2a 	bl	8001b50 <_sbrk>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_sbrk_r+0x1a>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	b103      	cbz	r3, 8006306 <_sbrk_r+0x1a>
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	200003fc 	.word	0x200003fc

0800630c <_realloc_r>:
 800630c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006310:	4680      	mov	r8, r0
 8006312:	4615      	mov	r5, r2
 8006314:	460c      	mov	r4, r1
 8006316:	b921      	cbnz	r1, 8006322 <_realloc_r+0x16>
 8006318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4611      	mov	r1, r2
 800631e:	f7ff bc59 	b.w	8005bd4 <_malloc_r>
 8006322:	b92a      	cbnz	r2, 8006330 <_realloc_r+0x24>
 8006324:	f7ff fbea 	bl	8005afc <_free_r>
 8006328:	2400      	movs	r4, #0
 800632a:	4620      	mov	r0, r4
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	f000 f81a 	bl	8006368 <_malloc_usable_size_r>
 8006334:	4285      	cmp	r5, r0
 8006336:	4606      	mov	r6, r0
 8006338:	d802      	bhi.n	8006340 <_realloc_r+0x34>
 800633a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800633e:	d8f4      	bhi.n	800632a <_realloc_r+0x1e>
 8006340:	4629      	mov	r1, r5
 8006342:	4640      	mov	r0, r8
 8006344:	f7ff fc46 	bl	8005bd4 <_malloc_r>
 8006348:	4607      	mov	r7, r0
 800634a:	2800      	cmp	r0, #0
 800634c:	d0ec      	beq.n	8006328 <_realloc_r+0x1c>
 800634e:	42b5      	cmp	r5, r6
 8006350:	462a      	mov	r2, r5
 8006352:	4621      	mov	r1, r4
 8006354:	bf28      	it	cs
 8006356:	4632      	movcs	r2, r6
 8006358:	f7ff fbc2 	bl	8005ae0 <memcpy>
 800635c:	4621      	mov	r1, r4
 800635e:	4640      	mov	r0, r8
 8006360:	f7ff fbcc 	bl	8005afc <_free_r>
 8006364:	463c      	mov	r4, r7
 8006366:	e7e0      	b.n	800632a <_realloc_r+0x1e>

08006368 <_malloc_usable_size_r>:
 8006368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636c:	1f18      	subs	r0, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfbc      	itt	lt
 8006372:	580b      	ldrlt	r3, [r1, r0]
 8006374:	18c0      	addlt	r0, r0, r3
 8006376:	4770      	bx	lr

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
